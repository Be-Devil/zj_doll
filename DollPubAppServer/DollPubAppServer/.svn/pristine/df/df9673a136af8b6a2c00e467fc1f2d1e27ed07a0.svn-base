package com.imlianai.dollpub.app.modules.core.doll.service;

import java.util.HashMap;
import java.util.Map;

import javax.annotation.Resource;

import org.springframework.stereotype.Service;

import com.alibaba.dubbo.config.annotation.Reference;
import com.alibaba.fastjson.JSON;
import com.imlianai.dollpub.app.modules.core.doll.bus.DollBusService;
import com.imlianai.dollpub.app.modules.core.doll.info.DollInfoService;
import com.imlianai.dollpub.app.modules.core.doll.pattern.service.DollBusPatternService;
import com.imlianai.dollpub.app.modules.core.doll.record.DollRecordDao;
import com.imlianai.dollpub.app.modules.core.doll.record.DollRecordService;
import com.imlianai.dollpub.app.modules.core.doll.share.DollShareService;
import com.imlianai.dollpub.app.modules.core.doll.utils.DollUtil;
import com.imlianai.dollpub.app.modules.core.doll.vo.DollApplyRes;
import com.imlianai.dollpub.app.modules.core.doll.vo.DollSuccessRes;
import com.imlianai.dollpub.app.modules.core.user.service.UserService;
import com.imlianai.dollpub.app.modules.publics.msg.leancloud.IMCommonService;
import com.imlianai.dollpub.app.modules.publics.msg.service.MsgService;
import com.imlianai.dollpub.app.modules.support.invite.service.InviteService;
import com.imlianai.dollpub.domain.doll.BusOperatingRecord;
import com.imlianai.dollpub.domain.doll.DollBus;
import com.imlianai.dollpub.domain.doll.DollInfo;
import com.imlianai.dollpub.domain.doll.DollOptRecord;
import com.imlianai.dollpub.domain.msg.Msg;
import com.imlianai.dollpub.domain.msg.MsgRoom;
import com.imlianai.dollpub.domain.msg.MsgRoomType;
import com.imlianai.dollpub.domain.msg.MsgType;
import com.imlianai.dollpub.domain.optrecord.OptRecord;
import com.imlianai.dollpub.domain.user.UserGeneral;
import com.imlianai.dollpub.machine.iface.IMachineRemoteService;
import com.imlianai.dollpub.machine.iface.domain.MachineOpt;
import com.imlianai.rpc.support.common.BaseLogger;
import com.imlianai.rpc.support.utils.DateUtils;
import com.imlianai.rpc.support.utils.StringUtil;


@Service
public class DollServiceImpl implements DollService {
	protected final BaseLogger logger = BaseLogger
			.getLogger(DollServiceImpl.class);
	@Resource
	DollRecordService dollRecordService;
	@Resource
	DollInfoService dollInfoService;
	@Resource
	DollRecordDao dollRecordDao;
	@Resource
	DollBusService dollBusService;
	@Resource
	private IMCommonService iMCommonService;
	@Resource
	private DollBusPatternService dollBusPatternService;

	@Reference
	private IMachineRemoteService iMachineRemoteService;
	@Resource
	MsgService msgService;
	@Resource
	UserService userService;
	@Resource
	InviteService inviteService;
	@Resource
	DollShareService dollShareService;

	@Override
	public DollApplyRes applyMachine(long uid, DollBus dollBus) {
		MachineOpt machineOpt = iMachineRemoteService.applyMachine(uid,
				dollBus.getBusId(), dollBus.getGroupId());
		// 记录日志
		dollRecordDao.addApplyLog(uid, dollBus.getBusId(),
				dollBus.getDeviceId(), JSON.toJSONString(machineOpt));
		if (machineOpt.isSuccess()) {
			DollOptRecord record = new DollOptRecord(uid, dollBus.getBusId(),
					machineOpt.getOptId(), dollBus.getDollId(),
					dollBus.getPrice());
			int optId = dollRecordService.saveDollOptRecord(record);
			record.setOptId(optId);
			dollBusService.addBusOperatingRecord(dollBus.getBusId(), uid,
					optId, machineOpt.getOptId());
			DollApplyRes res = new DollApplyRes(true, "");
			res.setRecord(record);
			UserGeneral user = userService.getUserGeneral(uid);
			MsgRoom msgRoom = new MsgRoom(dollBus, user,
					MsgRoomType.START_PLAY.type, user.getName() + " 成功上机了");
			Map<String, Object> dataMap = new HashMap<String, Object>();
			dataMap.put("remainSecond", 30);
			msgRoom.setData(JSON.toJSONString(dataMap));
			msgService.sendMsgRoom(msgRoom);
			return res;
		} else {
			return new DollApplyRes(false, machineOpt.getMsg());// 上机失败
		}
	}

	@Override
	public void sendApplyMsg(long uid, DollBus dollBus) {
		UserGeneral user = userService.getUserGeneral(uid);
		MsgRoom msgRoom = new MsgRoom(dollBus, user,
				MsgRoomType.START_PLAY.type, user.getName() + " 成功上机了");
		Map<String, Object> dataMap = new HashMap<String, Object>();
		dataMap.put("remainSecond", 30);
		msgRoom.setData(JSON.toJSONString(dataMap));
		msgService.sendMsgRoom(msgRoom);
	}

	@Override
	public int handleOpt(long uid, int busId, int action) {

		return 0;
	}

	@Override
	public int releaseBus(int busId) {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public int enterBus(long uid, int busId) {
		DollBus dollBus = dollBusService.getDollBus(busId);
		UserGeneral user = userService.getUserGeneral(uid);
		MsgRoom msgRoom = new MsgRoom(dollBus, user,
				MsgRoomType.ENTER_ROOM.type, user.getName() + " 来了");
		msgService.sendMsgRoom(msgRoom);
		leaveBus(uid, -2);
		dollRecordService.addWatchRecord(uid, busId);
		dollBusService.updateBusWatchCount(busId, 1);
		return 1;
	}

	@Override
	public DollBus initBusConversationId(DollBus dollBus) {
		if (dollBus != null) {
			if (StringUtil.isNullOrEmpty(dollBus.getConversationId())) {
				String conversationId = iMCommonService
						.createRoomConversation(dollBus.getBusId());
				dollBusService.updateConversationId(dollBus.getBusId(),
						conversationId);
				dollBus.setConversationId(conversationId);
			}
		}
		return dollBus;
	}


	@Override
	public void handleH5ResultMsg(DollBus bus, OptRecord optRecord,
			boolean isSuccess, int group) {
		if (optRecord != null) {
			// 夹中消息
			if (isSuccess) {
				sendSuccessMsg(bus, optRecord);
			} else {
				sendFailMsg(bus, optRecord);
			}
			dollRecordService.addDailyPlayRecord(optRecord.getUid(), isSuccess?1:0);
		}
	}

	@Override
	public void sendSuccessMsg(DollBus bus, DollOptRecord record, int group) {
		DollInfo doll = dollInfoService.getDollInfo(bus.getDollId());
		UserGeneral userGeneral = userService.getUserGeneral(record.getUid());
		// TODO 获取当天捉娃娃次数
		int playCount = dollRecordService.getDailyPlayCount(record.getUid()) + 1;
		String msgString = DollUtil.getAppSuccessMsg(userGeneral.getName(),
				doll.getName(), playCount);
		MsgRoom msgRoom = new MsgRoom(bus, userGeneral,
				MsgRoomType.GAIN_SUCCESS.type, msgString);
		DollSuccessRes shareRes = dollShareService.getDollSuccessShare(
				record.getUid(), doll, bus.getBusId(), userGeneral.getCustomerId());
		msgRoom.setData(JSON.toJSONString(shareRes));
		msgService.sendMsgRoom(msgRoom);
		Msg msg = new Msg(userGeneral, 0, MsgType.GAIN_SUCCESS.type, msgString);
		msgService.sendOnlineSysMsg(msg);

	}
	@Override
	public void sendSuccessMsg(DollBus bus, OptRecord record) {
		DollInfo doll = dollInfoService.getDollInfo(bus.getDollId());
		UserGeneral userGeneral = userService.getUserGeneral(record.getUid());
		// TODO 获取当天捉娃娃次数
		int playCount = dollRecordService.getDailyPlayCount(record.getUid()) + 1;
		String msgString = DollUtil.getAppSuccessMsg(userGeneral.getName(),
				doll.getName(), playCount);
		MsgRoom msgRoom = new MsgRoom(bus, userGeneral,
				MsgRoomType.GAIN_SUCCESS.type, msgString);
		DollSuccessRes shareRes = dollShareService.getDollSuccessShare(
				record.getUid(), doll, bus.getBusId(), record.getCustomerId());
		msgRoom.setData(JSON.toJSONString(shareRes));
		msgService.sendMsgRoom(msgRoom);
		Msg msg = new Msg(userGeneral, 0, MsgType.GAIN_SUCCESS.type, msgString);
		msgService.sendOnlineSysMsg(msg);
		msgRoom = new MsgRoom(bus, userGeneral,
				MsgRoomType.NORMAL_MSG.type, msgString);
		msgService.sendMsgRoom(msgRoom);
	}
	@Override
	public void sendFailMsg(DollBus bus, OptRecord record) {
		UserGeneral userGeneral = userService.getUserGeneral(record.getUid());
		final String msgString = DollUtil.getAppFailMsg(userGeneral.getName());
		if (DateUtils.secondBetween(record.getStartTime()) > 28) {
			final DollBus busd = bus;
			final UserGeneral userGenerald = userGeneral;
			MsgRoom msgRoom = new MsgRoom(busd, userGenerald,
					MsgRoomType.GAIN_FAIL.type, msgString);
			msgService.sendMsgRoom(msgRoom);
			msgRoom = new MsgRoom(busd, userGenerald,
					MsgRoomType.NORMAL_MSG.type, msgString);
			msgService.sendMsgRoom(msgRoom);
		} else {
			MsgRoom msgRoom = new MsgRoom(bus, userGeneral,
					MsgRoomType.GAIN_FAIL.type, msgString);
			msgService.sendMsgRoom(msgRoom);
			msgRoom = new MsgRoom(bus, userGeneral,
					MsgRoomType.NORMAL_MSG.type, msgString);
			msgService.sendMsgRoom(msgRoom);
		}

	}
	@Override
	public void sendFailMsg(DollBus bus, DollOptRecord record) {
		UserGeneral userGeneral = userService.getUserGeneral(record.getUid());
		final String msgString = DollUtil.getAppFailMsg(userGeneral.getName());
		if (DateUtils.secondBetween(record.getStartTime()) > 28) {
			final DollBus busd = bus;
			final UserGeneral userGenerald = userGeneral;
			MsgRoom msgRoom = new MsgRoom(busd, userGenerald,
					MsgRoomType.GAIN_FAIL.type, msgString);
			msgService.sendMsgRoom(msgRoom);
		} else {
			MsgRoom msgRoom = new MsgRoom(bus, userGeneral,
					MsgRoomType.GAIN_FAIL.type, msgString);
			msgService.sendMsgRoom(msgRoom);
		}

	}
	@Override
	public void leaveBus(long uid, int busId) {
		// 检查是否有在娃娃机
		int currentBusId = dollRecordService.getWatchBus(uid);
		if ((currentBusId > 0 && busId == currentBusId) || busId == -2) {
			// 离开并且扣除在线人数
			dollRecordService.deleteWatchRecord(uid, currentBusId);
			dollBusService.updateBusWatchCount(currentBusId, -1);
		}
	}

	@Override
	public void abandonMachine(long uid, int busId) {
		BusOperatingRecord record = dollBusService.getBusOperatingRecord(busId);
		if (record != null && record.getUid() == uid) {
			dollBusService.removeBusOperatingRecord(record);
			dollBusService.sendReleaseMsg(record);
		}
	}

}
