package com.imlianai.dollpub.app.modules.core.coinfactory.service.impl;

import com.alibaba.fastjson.JSON;
import com.google.common.collect.Maps;
import com.imlianai.dollpub.app.modules.core.coinfactory.dao.PushCoinVirtualFruitsDao;
import com.imlianai.dollpub.app.modules.core.coinfactory.dao.PushCoinVirtualMachineDao;
import com.imlianai.dollpub.app.modules.core.coinfactory.service.PushCoinFruitService;
import com.imlianai.dollpub.app.modules.core.coinfactory.vo.VirtualFruitsDialReqVO;
import com.imlianai.dollpub.app.modules.core.coinfactory.vo.VirtualFruitsDialRespVO;
import com.imlianai.dollpub.app.modules.core.coinfactory.vo.VirtualFruitsQueryReqVO;
import com.imlianai.dollpub.app.modules.core.coinfactory.vo.VirtualFruitsQueryRespVO;
import com.imlianai.dollpub.app.modules.core.doll.bus.DollBusService;
import com.imlianai.dollpub.domain.coinfactory.virtual.base.MachinePushCoinVirtual;
import com.imlianai.dollpub.domain.coinfactory.virtual.fruits.PushCoinFruitsAllot;
import com.imlianai.dollpub.domain.coinfactory.virtual.fruits.PushCoinFruitsResult;
import com.imlianai.dollpub.domain.coinfactory.virtual.fruits.PushCoinFruitsValue;
import com.imlianai.dollpub.domain.coinfactory.virtual.fruits.PushCoinFruitsWin;
import com.imlianai.dollpub.domain.doll.DollBus;
import com.imlianai.rpc.support.common.BaseLogger;
import com.imlianai.rpc.support.common.cmd.BaseRespVO;
import com.imlianai.rpc.support.common.exception.PrintException;
import com.imlianai.rpc.support.utils.StringUtil;
import com.imlianai.rpc.support.utils.SysTimerHandle;
import org.springframework.context.ApplicationListener;
import org.springframework.context.event.ContextRefreshedEvent;
import org.springframework.stereotype.Service;

import javax.annotation.Resource;
import java.util.*;

/**
 * 水果机核心数值
 *
 * @author wurui
 * @create 2018-06-19 10:18
 **/
@Service
public class PushCoinFruitServiceImpl implements PushCoinFruitService, ApplicationListener<ContextRefreshedEvent> {
    private BaseLogger logger = BaseLogger.getLogger(getClass());

    @Resource
    private PushCoinVirtualFruitsDao pushCoinVirtualFruitsDao;


    @Resource
    private DollBusService dollBusService;

    //全表
    @Resource
    private PushCoinVirtualMachineDao pushCoinVirtualMachineDao;

    /**
     * 存放水果机能出现的所有结果 7*7*7=343
     */
    private Map<Integer, List<PushCoinFruitsResult>> fruitResultMap = Maps.newConcurrentMap();

    /**
     * 存放水果机核心数值
     */
    private Map<Integer, PushCoinFruitsValue> fruitsCoreValueMap = Maps.newConcurrentMap();

    /**
     * 存放中奖类型与结果类型的映射
     */
    private Map<Integer, Integer> winTypeToResultTypeMap = Maps.newConcurrentMap();


    @Override
    public VirtualFruitsQueryRespVO query(VirtualFruitsQueryReqVO reqVO) {
        VirtualFruitsQueryRespVO respVO = new VirtualFruitsQueryRespVO();

        DollBus dollBus = dollBusService.getDollBus(reqVO.getBusId());
        if (dollBus != null) {
            if (dollBus.getVirtual() == 1 && dollBus.getType() == 1) {

                respVO.setBusId(dollBus.getBusId());

                MachinePushCoinVirtual machinePushCoinVirtual = pushCoinVirtualMachineDao.getOne(reqVO.getOptId());
                if (machinePushCoinVirtual != null && machinePushCoinVirtual.getState() != 1) {

                    try {
                        PushCoinFruitsWin pushCoinFruitsWin = pushCoinVirtualFruitsDao.getRecordByOptId(reqVO.getOptId());

                        if (pushCoinFruitsWin != null) {

                            if (pushCoinFruitsWin.getBusId() == dollBus.getBusId() && pushCoinFruitsWin.getUid() == reqVO.getUid()) {

                                logger.info("pushCoinFruitsWin=>" + JSON.toJSONString(pushCoinFruitsWin));
                                final int winId = pushCoinFruitsWin.getId();

                                PushCoinFruitsAllot pushCoinFruitsAllot = pushCoinVirtualFruitsDao.getOneWinAllotByWinId(winId);
                                if (pushCoinFruitsAllot != null) {
                                    if (pushCoinFruitsAllot.getBusId() == dollBus.getBusId() && pushCoinFruitsAllot.getUid() == reqVO.getUid()) {

                                        logger.info("中奖分配匹配成功,当前用户中奖=>" + pushCoinFruitsAllot.getCoin() + "币");

                                        if (pushCoinVirtualFruitsDao.updateAllotResult(pushCoinFruitsAllot.getId(), 1, pushCoinFruitsAllot.getRemark() + "(已赠送)") > 0) {

                                            logger.info("optId=>" + reqVO.getOptId() + ",uid=>" + reqVO.getUid() + ",busId=>" + dollBus.getBusId() + ",中奖类型：" + PushCoinFruitsValue.FruitsValueWinType.getDescByType(pushCoinFruitsAllot.getType()));

                                            int coin = pushCoinFruitsAllot.getRate() == 0 ? pushCoinFruitsAllot.getCoin() : pushCoinFruitsAllot.getCoin() * pushCoinFruitsAllot.getRate();
                                            logger.info("当前送出：" + coin);

                                            if (pushCoinVirtualFruitsDao.updateCurrent(pushCoinFruitsWin.getId(), coin) > 0) {
                                                logger.info("总需返奖:" + pushCoinFruitsWin.getTotal() + ",当前已返:" + (pushCoinFruitsWin.getCurrent() + pushCoinFruitsAllot.getCoin()));

                                                SysTimerHandle.execute(new TimerTask() {
                                                    @Override
                                                    public void run() {
                                                        try {
                                                            handleAfterRecord(winId);
                                                        } catch (Exception e) {
                                                            PrintException.printException(logger, e);
                                                        }
                                                    }
                                                }, 0);

                                            }

                                            respVO.setAllotId(pushCoinFruitsAllot.getId());
                                            respVO.setCoin(pushCoinFruitsAllot.getCoin());
                                            respVO.setType(pushCoinFruitsAllot.getType());
                                            respVO.setMagnetism(pushCoinFruitsAllot.getMagnetism());
                                            respVO.setRate(pushCoinFruitsAllot.getRate());
                                            respVO.setState(true);

                                            try {
                                                List<Integer> assembly = JSON.parseArray(pushCoinFruitsAllot.getAssembly(), Integer.TYPE);
                                                if (!StringUtil.isNullOrEmpty(assembly)) {

                                                    respVO.setA(assembly.get(0));
                                                    respVO.setB(assembly.get(1));
                                                    respVO.setC(assembly.get(2));
                                                    respVO.setMsg(pushCoinFruitsAllot.getRemark());
                                                    respVO.setResult(200);

                                                } else {

                                                    int resultType = winTypeToResultTypeMap.get(pushCoinFruitsAllot.getType());

                                                    PushCoinFruitsResult winResult = getWinAssemblyByType(resultType);

                                                    if (winResult != null) {
                                                        logger.info("随机中奖结果:" + winResult.getAssembly() + ",中奖描述=>" + winResult.getRemark());
                                                        respVO.setA(winResult.getA());
                                                        respVO.setB(winResult.getB());
                                                        respVO.setC(winResult.getC());
                                                        respVO.setMsg(winResult.getRemark());
                                                        respVO.setResult(210);

                                                    } else {

                                                        logger.info("结果处理错误....");
                                                        PushCoinFruitsResult noWinResult = getNoWinAssembly();
                                                        if (noWinResult != null) {

                                                            logger.info("自动生成不中奖结果....");

                                                            respVO.setA(noWinResult.getA());
                                                            respVO.setB(noWinResult.getB());
                                                            respVO.setC(noWinResult.getC());

                                                        } else {

                                                            logger.info("手动生成不中奖结果....");

                                                            respVO.setA(1);
                                                            respVO.setB(2);
                                                            respVO.setC(3);

                                                        }
                                                        respVO.setMsg("结果处理错误");
                                                        respVO.setResult(100);
                                                    }

                                                }
                                            } catch (Exception e) {
                                                logger.info("手动生成不中奖结果....err=>" + e.getMessage());

                                                respVO.setA(1);
                                                respVO.setB(2);
                                                respVO.setC(3);
                                                respVO.setMsg("结果处理错误");
                                                respVO.setResult(101);

                                            }
                                            return respVO;
                                        } else {
                                            logger.info("更新分配结果失败");
                                        }
                                    } else {
                                        logger.info("具体分配中的busId或uid不符合,无法送出奖励");
                                    }
                                } else {
                                    logger.info("获取奖励分配失败 winId=>" + winId);
                                }
                            } else {
                                logger.info("中奖记录中的busId或uid不符合,无法送出奖励");
                            }
                        } else {
                            logger.info("当前操作ID无中奖节点记录 optId:" + reqVO.getOptId());
                        }
                    } catch (Exception e) {
                        logger.info("err=>" + e.getMessage());
                    }
                }
            }
        }

        respVO.setState(true);
        respVO.setResult(-1);

        PushCoinFruitsResult noWinResult = getNoWinAssembly();
        if (noWinResult != null) {

            logger.info("自动生成不中奖结果....");

            respVO.setA(noWinResult.getA());
            respVO.setB(noWinResult.getB());
            respVO.setC(noWinResult.getC());
            respVO.setMsg(noWinResult.getRemark());

        } else {

            logger.info("手动生成不中奖结果....");

            respVO.setA(1);
            respVO.setB(2);
            respVO.setC(3);

            respVO.setMsg("结果处理错误");
        }
        return respVO;
    }

    @Override
    public BaseRespVO dial(VirtualFruitsDialReqVO reqVO) {
        logger.info("dial 进入摇奖处理");
        PushCoinFruitsAllot allot = pushCoinVirtualFruitsDao.getOneWinAllotById(reqVO.getAllotId());
        if (allot != null) {

            // type=2 转盘类型
            if (allot.getType() != 2) {
                return new BaseRespVO(0, false, "游戏类型错误");
            }

            if (allot.getIsDial() == 1) {
                return new BaseRespVO(0, false, "该记录已摇奖");
            }

            //验证记录有效性
            if (allot.getBusId() == reqVO.getBusId() && allot.getUid() == reqVO.getUid() && allot.getOptId() == reqVO.getOptId()) {

                logger.info("dial 用户=>" + reqVO.getUid() + ",busId=>" + reqVO.getBusId() + ",optId=>" + reqVO.getOptId());


                VirtualFruitsDialRespVO respVO = new VirtualFruitsDialRespVO();
                respVO.setUid(allot.getUid());
                respVO.setOptId(allot.getOptId());
                try {

                    if (allot.getCoin() == 0) {
                        //logger.info("数值表赠送金币有误,0,数值ID：" + allot.getFvId());
                        //allot.setCoin(0);

                        respVO.setRate(0);
                        respVO.setCoin(0);
                        respVO.setMsg("好可惜,差一点点就成功了!");

                        if (pushCoinVirtualFruitsDao.updateAllotDialResult(allot.getId(), allot.getCoin(), allot.getRemark() + "(数值错误") > 0) {
                            logger.info("数值错误");
                            return respVO;
                        }

                    }

                    respVO.setResult(200);
                    respVO.setState(true);

                    if (reqVO.getResult() == 0) {

                        respVO.setRate(0);
                        respVO.setCoin(allot.getCoin());
                        respVO.setMsg("玩家认怂!");

                        if (pushCoinVirtualFruitsDao.updateAllotDialResult(allot.getId(), allot.getCoin(), allot.getRemark() + "(玩家选择怂,默认获得:)" + allot.getCoin() + "币") > 0) {
                            logger.info("更新摇奖结果成功,玩家选择怂,默认获得:" + allot.getCoin() + "币");
                            return respVO;
                        }

                    } else if (reqVO.getResult() == 1) {

                        int[] dialArray = {0, 1, 0, 1, 0, 1, 0, 3, 0, 3, 0, 5};
                        int result = dialArray[new Random().nextInt(12)];
                        logger.info("摇奖结果:" + result);

                        if (result == 1) {

                            respVO.setRate(result);
                            respVO.setCoin(allot.getCoin());
                            respVO.setMsg("我想吃章鱼!");

                            if (pushCoinVirtualFruitsDao.updateAllotDialResult(allot.getId(), allot.getCoin(), allot.getRemark() + "(玩家选择转,倍率:" + result + "倍,获得:" + allot.getCoin() + "币)") > 0) {
                                logger.info("更新摇奖结果成功,玩家选择转,倍率:" + result + "倍,获得:" + allot.getCoin() + "币");
                            }

                        } else if (result == 3 || result == 5) {

                            if (allot.getRate() == 0) {
                                result = 1;
                            } else {
                                result = allot.getRate();
                            }

                            logger.info("实际随机倍率:" + result + ",数值表倍率:" + allot.getRate());

                            //result = allot.getRate();
                            int dialCoin = allot.getCoin() * result;
                            respVO.setRate(result);
                            respVO.setCoin(dialCoin);

                            if (allot.getRate() == 3) {
                                respVO.setMsg("吃串烧丸子也不错哦!");
                            } else {
                                respVO.setMsg("大吉大利今晚吃章鱼!");
                            }

                            if (pushCoinVirtualFruitsDao.updateAllotDialResult(allot.getId(), allot.getCoin(), allot.getRemark() + "(实际随机倍率:" + result + ",数值表倍率:" + allot.getRate() + ")(玩家选择转,倍率:" + result + "倍,获得:" + dialCoin + "币)") > 0) {
                                logger.info("更新摇奖结果成功,玩家选择转,倍率:" + result + "倍,获得:" + dialCoin + "币");
                            }

//                            if (allot.getRate() == 3 || allot.getRate() == 5){
//                                result = allot.getRate();
//                                int dialCoin = allot.getCoin() * result;
//                                respVO.setRate(result);
//                                respVO.setCoin(dialCoin);
//
//                                if (allot.getRate() == 3){
//                                    respVO.setMsg("吃串烧丸子也不错哦!");
//                                }else {
//                                    respVO.setMsg("大吉大利今晚吃章鱼!");
//                                }
//
//                                if (pushCoinVirtualFruitsDao.updateAllotDialResult(allot.getId(), allot.getCoin(), allot.getRemark() + "(玩家选择转,倍率:" + result + "倍,获得:" + dialCoin + "币)") > 0) {
//                                    logger.info("更新摇奖结果成功,玩家选择转,倍率:" + result + "倍,获得:" + dialCoin + "币");
//                                }
//
//                            }else {
//                                logger.info("数值表倍率有误,默认1倍奖励,数值ID：" + allot.getFvId());
//
//                                respVO.setRate(result);
//                                respVO.setCoin(allot.getCoin());
//
//                                if (pushCoinVirtualFruitsDao.updateAllotDialResult(allot.getId(), allot.getCoin(), allot.getRemark() + "(玩家选择转,倍率:" + result + "倍,获得:" + allot.getCoin() + "币)") > 0) {
//                                    logger.info("更新摇奖结果成功,玩家选择转,倍率:" + result + "倍,获得:" + allot.getCoin() + "币");
//                                }
//                            }

                        } else {

                            respVO.setRate(0);
                            respVO.setCoin(0);
                            respVO.setMsg("好可惜,差一点点就成功了!");

                            if (pushCoinVirtualFruitsDao.updateAllotDialResult(allot.getId(), allot.getCoin(), allot.getRemark() + "(随机转到0倍)") > 0) {
                                logger.info("更新摇奖结果成功,玩家选择转,倍率:" + result + "倍,获得:" + 0 + "币");
                            }

                        }

                        return respVO;

                    } else {
                        return new BaseRespVO(0, false, "请选择怂或转!");
                    }

                } catch (Exception e) {
                    return new BaseRespVO(0, false, "摇奖错误");
                }

            } else {
                return new BaseRespVO(0, false, "该记录无效");
            }
        }
        return new BaseRespVO(0, false, "不存在的奖励记录");
    }

    @Override
    public void initFruitCore() {
        if (fruitResultMap == null || fruitResultMap.isEmpty()) {
            initFruitResultToMap();
        }

        if (fruitsCoreValueMap == null || fruitsCoreValueMap.isEmpty()) {
            initFruitsCoreValueToMap();
        }

        if (winTypeToResultTypeMap == null || winTypeToResultTypeMap.isEmpty()) {
            winTypeMapperToResultType();
        }
    }

    @Override
    public void handleBeforeAllot(long optId) {

        this.initFruitCore();

        MachinePushCoinVirtual machinePushCoinVirtual = pushCoinVirtualMachineDao.getOne(optId);
        if (machinePushCoinVirtual != null) {

            if (machinePushCoinVirtual.getState() != 1) {

                int nodeCoin = machinePushCoinVirtual.getNodeCoin();
                int fvId = machinePushCoinVirtual.getFvId();

                try {

                    PushCoinFruitsValue nodeValue;

                    boolean isClear = false;

                    if (fvId >= fruitsCoreValueMap.size()) {
                        if (pushCoinVirtualMachineDao.resetNode(optId) > 0) {
                            fvId = 0;
                            logger.info("操作ID节点：" + fvId + ",已到达最终数值:" + fruitsCoreValueMap.size() + ",执行重置节点操作");
                        }
                    }


                    if (fvId == 0) {
                        //判断是否达到第一个节点
                        nodeValue = fruitsCoreValueMap.get(1);
                        if (nodeValue != null) {
                            if (nodeCoin >= nodeValue.getNode()) {
                                //清空当前节点值,节点ID+1
                                int flag = pushCoinVirtualMachineDao.updateNextNode(nodeValue.getNode(), machinePushCoinVirtual.getOptId());
                                if (flag > 0) {
                                    isClear = true;
                                }
                            }
                        }

                    } else {
                        nodeValue = fruitsCoreValueMap.get(fvId + 1);
                        if (nodeValue != null) {
                            if (nodeCoin >= nodeValue.getNode()) {
                                int flag = pushCoinVirtualMachineDao.updateNextNode(nodeValue.getNode(), machinePushCoinVirtual.getOptId());
                                if (flag > 0) {
                                    isClear = true;
                                }
                            }
                        }
                    }

                    logger.info("当前节点数值ID：" + fvId);


                    if (isClear) {


                        fvId++;
                        logger.info("变更之后数值ID：" + fvId);

                        int type = 0;
                        if (nodeValue.getClown3() > 0) {
                            type = 1;
                        }

                        PushCoinFruitsWin fruitsWin = new PushCoinFruitsWin();
                        fruitsWin.setFvId(fvId);
                        fruitsWin.setUid(machinePushCoinVirtual.getUid());
                        fruitsWin.setBusId(machinePushCoinVirtual.getBusId());
                        fruitsWin.setOptId(machinePushCoinVirtual.getOptId());
                        fruitsWin.setNode(nodeValue.getNode());
                        fruitsWin.setType(type);
                        fruitsWin.setMagnetism(nodeValue.getMagnetism());
                        fruitsWin.setResult(0);
                        fruitsWin.setTotal(nodeValue.getCoin());
                        fruitsWin.setCurrent(0);
                        fruitsWin.setRemark("节点ID:" + fvId + ",奖励:" + nodeValue.getCoin() + "币");
                        fruitsWin.setNodeJson(JSON.toJSONString(nodeValue));

                        int winId = pushCoinVirtualFruitsDao.addWinRecord(fruitsWin);

                        if (winId > 0) {

                            logger.info("新增节点中奖记录,开始执行具体分配奖励");

                            PushCoinFruitsAllot allot = new PushCoinFruitsAllot();
                            allot.setWinId(winId);//中奖ID
                            allot.setBusId(machinePushCoinVirtual.getBusId());
                            allot.setUid(machinePushCoinVirtual.getUid());
                            allot.setOptId(machinePushCoinVirtual.getOptId());

                            allot.setFvId(fvId);//每次都加1
                            allot.setMagnetism(nodeValue.getMagnetism());//磁力根据节点数值
                            allot.setResult(0);


                            //水果机 两个水果
                            if (!StringUtil.isNullOrEmpty(nodeValue.getFruits())) {
                                List<Integer> fruitsList = JSON.parseArray(nodeValue.getFruits(), Integer.TYPE);

                                logger.info("分配水果奖=>" + JSON.toJSONString(fruitsList));

                                for (int fruit : fruitsList) {

                                    allot.setType(PushCoinFruitsValue.FruitsValueWinType.ERNIE_TYPE.type);//水果机类型
                                    allot.setCoin(fruit);


                                    int fruitType = PushCoinFruitsResult.FruitsResultType.WIN_EQ_TWO_FRUIT.type; //水果机 排列结果
                                    List<PushCoinFruitsResult> resultList = fruitResultMap.get(fruitType);
                                    if (!StringUtil.isNullOrEmpty(resultList)) {
                                        Collections.shuffle(resultList);
                                        allot.setAssembly(resultList.get(0).getAssembly());
                                    }

                                    allot.setRemark("水果机出奖:" + fruit + "币");

                                    if (pushCoinVirtualFruitsDao.addWinAllot(allot) > 0) {
                                        logger.info("新增具体水果机奖励");
                                    }
                                }

                            }

                            //泡泡奖 二水果+一丑
                            if (nodeValue.getPop() > 0) {

                                allot.setType(PushCoinFruitsValue.FruitsValueWinType.BUBBLE_TYPE.type);//点泡泡游戏类型
                                allot.setCoin(nodeValue.getPop());

                                int popType = PushCoinFruitsResult.FruitsResultType.WIN_HAT.type;  //帽子戏法(点泡泡) 排列结果
                                List<PushCoinFruitsResult> resultList = fruitResultMap.get(popType);
                                if (!StringUtil.isNullOrEmpty(resultList)) {
                                    Collections.shuffle(resultList);
                                    allot.setAssembly(resultList.get(0).getAssembly());
                                }

                                allot.setRemark("点泡泡出奖:" + nodeValue.getPop() + "币");

                                if (pushCoinVirtualFruitsDao.addWinAllot(allot) > 0) {
                                    logger.info("新增具体点泡泡奖励");
                                }

                            }

                            //转盘游戏 三水果（小游戏）
                            if (nodeValue.getDial() > 0) {

                                allot.setType(PushCoinFruitsValue.FruitsValueWinType.DIAL_TYPE.type);//转盘游戏类型
                                allot.setCoin(nodeValue.getDial());

                                int dialType = PushCoinFruitsResult.FruitsResultType.WIN_EQ_THREE_FRUIT.type;  //相同3个水果(转盘游戏) 排列结果
                                List<PushCoinFruitsResult> resultList = fruitResultMap.get(dialType);
                                if (!StringUtil.isNullOrEmpty(resultList)) {
                                    Collections.shuffle(resultList);
                                    allot.setAssembly(resultList.get(0).getAssembly());
                                }

                                //转盘倍率
                                allot.setRate(nodeValue.getRate());

                                allot.setRemark("转盘游戏出奖:" + nodeValue.getDial() + "币");

                                if (pushCoinVirtualFruitsDao.addWinAllot(allot) > 0) {
                                    logger.info("新增具体转盘游戏奖励");
                                }

                            }


                            //一丑
                            if (nodeValue.getClown1() > 0) {

                                allot.setType(PushCoinFruitsValue.FruitsValueWinType.ONE_CLOWN_TYPE.type);//一丑类型
                                allot.setCoin(nodeValue.getClown1());

                                int clown1Type = PushCoinFruitsResult.FruitsResultType.WIN_ONE_CLOWN.type;  //一丑排列结果
                                List<PushCoinFruitsResult> resultList = fruitResultMap.get(clown1Type);
                                if (!StringUtil.isNullOrEmpty(resultList)) {
                                    Collections.shuffle(resultList);
                                    allot.setAssembly(resultList.get(0).getAssembly());
                                }
                                allot.setRemark("一丑出奖:" + nodeValue.getClown1() + "币");

                                if (pushCoinVirtualFruitsDao.addWinAllot(allot) > 0) {
                                    logger.info("新增具体一丑出奖奖励");
                                }
                            }

                            //二丑
                            if (nodeValue.getClown2() > 0) {

                                allot.setType(PushCoinFruitsValue.FruitsValueWinType.TWO_CLOWN_TYPE.type);//二丑类型
                                allot.setCoin(nodeValue.getClown2());

                                int clown2Type = PushCoinFruitsResult.FruitsResultType.WIN_TWO_CLOWN.type;  //二丑排列结果
                                List<PushCoinFruitsResult> resultList = fruitResultMap.get(clown2Type);
                                if (!StringUtil.isNullOrEmpty(resultList)) {
                                    Collections.shuffle(resultList);
                                    allot.setAssembly(resultList.get(0).getAssembly());
                                }
                                allot.setRemark("二丑出奖:" + nodeValue.getClown2() + "币");

                                if (pushCoinVirtualFruitsDao.addWinAllot(allot) > 0) {
                                    logger.info("新增具体二丑出奖奖励");
                                }
                            }


                            //三丑 彩金

                            if (nodeValue.getClown3() > 0) {

                                allot.setType(PushCoinFruitsValue.FruitsValueWinType.THREE_CLOWN_TYPE.type);//三丑类型
                                allot.setCoin(nodeValue.getClown3());

                                int clown3Type = PushCoinFruitsResult.FruitsResultType.WIN_THREE_CLOWN.type;  //三丑排列结果
                                List<PushCoinFruitsResult> resultList = fruitResultMap.get(clown3Type);
                                if (!StringUtil.isNullOrEmpty(resultList)) {
                                    Collections.shuffle(resultList);
                                    allot.setAssembly(resultList.get(0).getAssembly());
                                }
                                allot.setRemark("三丑出奖:" + nodeValue.getClown3() + "币");

                                if (pushCoinVirtualFruitsDao.addWinAllot(allot) > 0) {
                                    logger.info("新增具体三丑出奖奖励");
                                }
                            }

                        }

                    }

                } catch (Exception e) {
                    logger.info("handleBeforeAllot err=>" + e.getMessage());
                }
            }
        }
    }

    /**
     * 处理后续中奖记录
     */
    private void handleAfterRecord(int winId) {
        PushCoinFruitsWin pushCoinFruitsWin = pushCoinVirtualFruitsDao.getRecordById(winId);
        if (pushCoinFruitsWin != null && pushCoinFruitsWin.getCurrent() >= pushCoinFruitsWin.getTotal()) {
            if (pushCoinVirtualFruitsDao.completeAssigned(winId, pushCoinFruitsWin.getRemark() + "(完成所有分配奖励)") > 0) {
                logger.info("中奖记录完成所有的分配");
            }
        }
    }


    /**
     * 初始化水果机结果到内存(内存使用并发map,避免出现并发)
     */
    private void initFruitResultToMap() {
        for (PushCoinFruitsResult.FruitsResultType resultType : PushCoinFruitsResult.FruitsResultType.values()) {
            fruitResultMap.put(resultType.type, pushCoinVirtualFruitsDao.getResultByType(resultType.type));
        }
        if (!StringUtil.isNullOrEmpty(fruitResultMap)) {
            logger.info("初始化水果机结果");
        }
    }

    /**
     * 初始化水果机核心数值到内存(内存使用并发map,避免出现并发)
     */
    private void initFruitsCoreValueToMap() {
        if (fruitsCoreValueMap != null) {
            if (!fruitsCoreValueMap.isEmpty()) {
                fruitsCoreValueMap.clear();
            }
        }
        List<PushCoinFruitsValue> valueList = pushCoinVirtualFruitsDao.getAllFruitsValue();
        if (!StringUtil.isNullOrEmpty(valueList)) {
            for (PushCoinFruitsValue value : valueList) {
                fruitsCoreValueMap.put(value.getId(), value);
            }
            logger.info("初始化水果机数值");
        }
    }

    /**
     * 随机获得一个不中奖的组合
     *
     * @return
     */
    private PushCoinFruitsResult getNoWinAssembly() {
        if (!StringUtil.isNullOrEmpty(fruitResultMap)) {
            List<PushCoinFruitsResult> resultList = fruitResultMap.get(PushCoinFruitsResult.FruitsResultType.NOT_WIN_FRUIT.type);
            if (!StringUtil.isNullOrEmpty(resultList)) {
                Collections.shuffle(resultList);
                return resultList.get(0);
            }
        }
        return null;
    }

    /**
     * 通过类型随机获得一个中奖的组合
     *
     * @param type
     * @return
     */
    private PushCoinFruitsResult getWinAssemblyByType(int type) {
        if (!StringUtil.isNullOrEmpty(fruitResultMap)) {
            List<PushCoinFruitsResult> resultList = fruitResultMap.get(type);
            if (!StringUtil.isNullOrEmpty(resultList)) {
                Collections.shuffle(resultList);
                return resultList.get(0);
            }
        }
        return null;
    }


    /**
     * 中奖类型与结果类型映射
     */
    private void winTypeMapperToResultType() {
        for (PushCoinFruitsValue.FruitsValueWinType winType : PushCoinFruitsValue.FruitsValueWinType.values()) {

            //水果机 两个水果
            if (winType.type == PushCoinFruitsValue.FruitsValueWinType.ERNIE_TYPE.type) {
                winTypeToResultTypeMap.put(winType.type, PushCoinFruitsResult.FruitsResultType.WIN_EQ_TWO_FRUIT.type);
            }

            //泡泡奖 二水果+一丑
            if (winType.type == PushCoinFruitsValue.FruitsValueWinType.BUBBLE_TYPE.type) {
                winTypeToResultTypeMap.put(winType.type, PushCoinFruitsResult.FruitsResultType.WIN_HAT.type);
            }

            //转盘游戏 三水果（小游戏）
            if (winType.type == PushCoinFruitsValue.FruitsValueWinType.DIAL_TYPE.type) {
                winTypeToResultTypeMap.put(winType.type, PushCoinFruitsResult.FruitsResultType.WIN_EQ_THREE_FRUIT.type);
            }

            //1丑
            if (winType.type == PushCoinFruitsValue.FruitsValueWinType.ONE_CLOWN_TYPE.type) {
                winTypeToResultTypeMap.put(winType.type, PushCoinFruitsResult.FruitsResultType.WIN_ONE_CLOWN.type);
            }

            //2丑
            if (winType.type == PushCoinFruitsValue.FruitsValueWinType.TWO_CLOWN_TYPE.type) {
                winTypeToResultTypeMap.put(winType.type, PushCoinFruitsResult.FruitsResultType.WIN_TWO_CLOWN.type);
            }

            //3丑
            if (winType.type == PushCoinFruitsValue.FruitsValueWinType.THREE_CLOWN_TYPE.type) {
                winTypeToResultTypeMap.put(winType.type, PushCoinFruitsResult.FruitsResultType.WIN_THREE_CLOWN.type);
            }
        }
        logger.info("初始化中奖类型映射到结果类型");
    }


    /**
     * 初始化所有水果出现的结果
     */
    private void initResult() {
        int total = 0;
        for (int i = 1; i <= 7; i++) {
            for (int j = 1; j <= 7; j++) {
                for (int k = 1; k <= 7; k++) {
                    total++;
                    PushCoinFruitsResult result = new PushCoinFruitsResult();

                    result.setA(i);
                    result.setB(j);
                    result.setC(k);
                    result.setAssembly("[" + i + "," + j + "," + k + "]");

                    //1:不中奖水果,2:相同2个水果,3:相同3个水果,4:帽子戏法,5:中1丑,6:中2丑,7:中3丑

                    //不中奖的结果
                    if (i != 7 && i != j) {
                        result.setType(1);
                        result.setRemark("不中奖结果");
                        pushCoinVirtualFruitsDao.addResult(result);
                    }
                    //二个相同的
                    if (i == j && k != 7 && i != k && i != 7) {
                        result.setType(2);
                        result.setRemark("相同2个水果");
                        pushCoinVirtualFruitsDao.addResult(result);
                    }
                    //三个相同的
                    if (i == j && i == k && i != 7) {
                        result.setType(3);
                        result.setRemark("相同3个水果");
                        pushCoinVirtualFruitsDao.addResult(result);
                    }
                    if (i == j && i != k && k == 7) {
                        result.setType(4);
                        result.setRemark("帽子戏法");
                        pushCoinVirtualFruitsDao.addResult(result);
                    }
                    //一丑
                    if ((i == 7 && j != 7)) {
                        result.setType(5);
                        result.setRemark("中1丑");
                        pushCoinVirtualFruitsDao.addResult(result);
                    }
                    //二丑
                    if (i == 7 && j == 7 && k != 7) {
                        result.setType(6);
                        result.setRemark("中2丑");
                        pushCoinVirtualFruitsDao.addResult(result);
                    }
                    //三丑
                    if (i == 7 && j == 7 && k == 7) {
                        result.setType(7);
                        result.setRemark("中3丑");
                        pushCoinVirtualFruitsDao.addResult(result);
                    }
                }
            }
        }
        logger.info("initFruitResult 生成=>" + total + " 种结果");
    }


    @Override
    public void onApplicationEvent(ContextRefreshedEvent contextRefreshedEvent) {
        if (contextRefreshedEvent.getApplicationContext().getParent() == null) {
            logger.info("==================onApplicationEvent initFruitCore==================");
            this.initFruitCore();
        }
    }


    public static void main(String[] args) {
        int[] dialArray = {0, 1, 0, 1, 0, 1, 0, 3, 0, 3, 0, 5};

        for (int i = 0; i < 100; i++) {
            int result = dialArray[new Random().nextInt(12)];
            System.out.println("摇奖结果:" + result);
        }

    }
}
