package com.imlianai.dollpub.app.modules.support.shipping.service;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Random;

import javax.annotation.Resource;

import org.springframework.stereotype.Service;

import com.alibaba.fastjson.JSON;
import com.imlianai.dollpub.app.modules.core.doll.info.DollInfoService;
import com.imlianai.dollpub.app.modules.core.trade.service.TradeService;
import com.imlianai.dollpub.app.modules.core.user.service.UserService;
import com.imlianai.dollpub.app.modules.support.address.service.UserAddressService;
import com.imlianai.dollpub.app.modules.support.pack.constants.PackConstants;
import com.imlianai.dollpub.app.modules.support.shipping.constants.ShippingConstants;
import com.imlianai.dollpub.app.modules.support.shipping.dao.ShippingDao;
import com.imlianai.dollpub.app.modules.support.shipping.vo.ApplyDollInfo;
import com.imlianai.dollpub.app.modules.support.shipping.vo.ApplyShippingRespVO;
import com.imlianai.dollpub.app.modules.support.userdoll.service.UserDollService;
import com.imlianai.dollpub.domain.doll.BaseDollInfo;
import com.imlianai.dollpub.domain.doll.DollInfo;
import com.imlianai.dollpub.domain.doll.DollOrderInfo;
import com.imlianai.dollpub.domain.doll.DollOrderRecord;
import com.imlianai.dollpub.domain.doll.DollOrderRecord.OrderPayStatus;
import com.imlianai.dollpub.domain.doll.user.UserDoll;
import com.imlianai.dollpub.domain.doll.user.UserDoll.DollStatus;
import com.imlianai.dollpub.domain.shipping.DollShippingNotice;
import com.imlianai.dollpub.domain.trade.TradeCharge;
import com.imlianai.dollpub.domain.trade.TradeCostType;
import com.imlianai.dollpub.domain.trade.TradeRecord;
import com.imlianai.dollpub.domain.trade.TradeType;
import com.imlianai.dollpub.domain.user.UserBase;
import com.imlianai.rpc.support.common.BaseLogger;
import com.imlianai.rpc.support.common.cmd.BaseRespVO;
import com.imlianai.rpc.support.common.cmd.ResCodeEnum;
import com.imlianai.rpc.support.common.exception.NotEnoughBeanException;
import com.imlianai.rpc.support.common.exception.PrintException;
import com.imlianai.rpc.support.common.exception.TradeOperationException;
import com.imlianai.rpc.support.utils.DateUtils;
import com.imlianai.rpc.support.utils.StringUtil;

@Service
public class ShippingServiceImpl implements ShippingService {

	private static final BaseLogger LOG = BaseLogger.getLogger(ShippingServiceImpl.class);

	@Resource
	private UserDollService userDollService;
	
	@Resource
	private DollInfoService dollInfoService;
	
	@Resource
	private ShippingDao shippingDao;
	
	@Resource
	private TradeService tradeService;

	
	@Resource
	private UserService userService;

	@Resource
	private UserAddressService userAddressService;
	
	@Override
	public List<BaseDollInfo> getShippingList(Long uid) {
		List<BaseDollInfo> dollInfoList = new ArrayList<BaseDollInfo>();
		List<UserDoll> dollList = userDollService.getShippingList(uid);
		if (!StringUtil.isNullOrEmpty(dollList)) {
			for (UserDoll userDoll : dollList) {
				DollInfo dollInfo = dollInfoService.getDollInfo(userDoll.getDollId());
				if (dollInfo == null)
					continue;
				BaseDollInfo baseDollInfo = new BaseDollInfo(userDoll.getId(), dollInfo.getName(),
						dollInfo.getImgSummry(), userDoll.getOptId());
				dollInfoList.add(baseDollInfo);
			}
		}
		return dollInfoList;
	}

	@Override
	public BaseRespVO applyShippingBill(List<ApplyDollInfo> dollList, Long uid, Long addressId, String remark) {
		try {
			LOG.info("applyShipping:" + JSON.toJSONString(dollList) + ",uid=" + uid + ",addressId=" + addressId);
			UserBase userBase = userService.getUserBase(uid);
			if(userBase == null || (userBase != null && userBase.getNumber() == 0)) { // 验证手机绑定
				return new BaseRespVO(ResCodeEnum.PHONE_BIND);
			}
			int customerId = userBase.getCustomerId();
			long agencId = userBase.getAgentId();
			if(StringUtil.isNullOrEmpty(dollList)) {
				return new BaseRespVO(-1, false, "发货的娃娃列表不能为空~");
			}
			LOG.info("applyShipping:next");
			List<Long> uDollIds = new ArrayList<Long>(); // 申请发货的用户娃娃ID
			Map<Long, UserDoll> userDollMap = new HashMap<Long, UserDoll>();
			List<ApplyDollInfo> inDollInfos = new ArrayList<ApplyDollInfo>(); // 允许单独发货的娃娃数量
			for(ApplyDollInfo applyDollInfo : dollList) {
				UserDoll userDoll = userDollService.getUserDollById(applyDollInfo.getId());
				if(userDoll == null) {
					return new BaseRespVO(-1, false, "部分娃娃不存在，请刷新重试~");
				}
				if(userDoll.getStatus() != DollStatus.STORE.status) {
					return new BaseRespVO(-1, false, "部分娃娃不满足发货条件，请刷新重试~");
				}
				uDollIds.add(applyDollInfo.getId());
				userDollMap.put(applyDollInfo.getId(), userDoll);
				// 获取可单独发货的娃娃
				DollInfo dollInfo = dollInfoService.getDollInfo(userDoll.getDollId()); 
				if(dollInfo.getGoodsType() == 0 ) {
					inDollInfos.add(applyDollInfo);
				}
			}
			if(inDollInfos.size() == 0) {
				return new BaseRespVO(-1, false, "没有可发货的娃娃~");
			}
			int postage = getPostageRmb(dollList, uid); // 获取邮费
			boolean needPay = true;
			if(postage == 0) {//无需油费，直接已支付状态
				needPay = false;
			} else {//需要油费，跳转待支付
				
			}
				long orderNum = 0;
				for(int i = 1; i <= 3; i++) { // 订单号重复时重试次数
					orderNum = generateOrderNum(); // 订单号
					int result = shippingDao.saveDollOrderRecord(orderNum, uid, addressId, customerId,agencId,remark,needPay?OrderPayStatus.INIT.status:OrderPayStatus.PAYED.status,postage);
					if(result > 0) break;
					if(result <= 0 && i == 3) {
						return new BaseRespVO(-1, false, "生成订单失败，请重试~");
					}
				}
				if(shippingDao.saveShippingRecord(uid, orderNum, customerId) > 0) { // 保存娃娃发货记录
					for(Long uDollId : uDollIds) {
						UserDoll userDoll = userDollMap.get(uDollId);
						DollInfo dollInfo = dollInfoService.getDollInfo(userDoll.getDollId());
						shippingDao.saveDollOrderInfo(uid, uDollId, orderNum, userDoll.getDollId(), userDoll.getOptId(), dollInfo.getCompany()); // 娃娃订单信息
						userDollService.updateUserDollStatus(uDollId, DollStatus.APPLY_SUCC.status); // 修改用户娃娃状态
					}
				}
				ApplyShippingRespVO respVO = new ApplyShippingRespVO();
				respVO.setCoin(tradeService.getAccount(uid).getCoin());
				respVO.setOrderNum(orderNum);
				respVO.setNeedPay(needPay);
				return respVO;
		} catch(Exception e) {
			PrintException.printException(LOG, e);
			return new BaseRespVO(-1, false, "系统异常，请稍后再试~");
		}
	}
	
	@Override
	public BaseRespVO applyShipping(List<ApplyDollInfo> dollList, Long uid, Long addressId) {
		try {
			LOG.info("applyShipping:" + JSON.toJSONString(dollList) + ",uid=" + uid + ",addressId=" + addressId);
			UserBase userBase = userService.getUserBase(uid);
			if(userBase == null) {
				return new BaseRespVO(ResCodeEnum.USER_NOT_FOUND);
			}
			int customerId = userBase.getCustomerId();
			long agencId = userBase.getAgentId();
			if (StringUtil.isNullOrEmpty(dollList)) {
				return new BaseRespVO(-1, false, "发货的娃娃列表不能为空~");
			}
			
			if(StringUtil.isNullOrEmpty(userAddressService.getList(uid))) {
				return new BaseRespVO(-1, false, "请先填写收货地址");
			}
			
			LOG.info("applyShipping:next");
			
			List<Long> uDollIds = new ArrayList<Long>(); // 申请发货的用户娃娃ID
			Map<Long, UserDoll> userDollMap = new HashMap<Long, UserDoll>();
			
			for (ApplyDollInfo applyDollInfo : dollList) {
				UserDoll userDoll = userDollService.getUserDollById(applyDollInfo.getId());
				if (userDoll == null) {
					return new BaseRespVO(-1, false, "部分娃娃不存在，请刷新重试~");
				}
				if (userDoll.getStatus() != 0) {
					return new BaseRespVO(-1, false, "部分娃娃不满足发货条件，请刷新重试~");
				}
				uDollIds.add(applyDollInfo.getId());
				userDollMap.put(applyDollInfo.getId(), userDoll);
			}
			
			int postage = getPostage(dollList, uid); // 获取邮费
			boolean isPay = false;
			if (postage == 0) {
				isPay = true;
			} else {
				if(tradeService.getAccount(uid).getCoin() >= postage) {
					TradeRecord tradeRecord = new TradeRecord(uid, 0, TradeType.SHIPPING_CONSUME.type, 0, postage,
							TradeCostType.COST_COIN.type, "申请发货消费游戏币" + postage);
					isPay = tradeService.consume(tradeRecord);
				}else {
					return new ApplyShippingRespVO(600, false, "余额不足");
				}
			}
			if (isPay) {
				long orderNum = generateOrderNum(); // 订单号
				for (int i = 1; i <= 3; i++) { // 订单号重复时重试次数
					int result = shippingDao.saveDollOrderRecord(orderNum, uid, addressId, customerId,agencId,"",OrderPayStatus.PAYED.status,0);
					/*LOG.info("applyShipping result:"+result);
					if (result > 0)
						break;
					if (result <= 0 && i == 3) {
						return new BaseRespVO(-1, false, "生成订单失败，请重试~");
					}
					orderNum = generateOrderNum();*/
				}
				if (shippingDao.saveShippingRecord(uid, orderNum, customerId) > 0) { // 保存娃娃发货记录
					LOG.info("uDollIds=>" + uDollIds.size());
					for (Long uDollId : uDollIds) {
						UserDoll userDoll = userDollMap.get(uDollId);
						DollInfo dollInfo = dollInfoService.getDollInfo(userDoll.getDollId());
						LOG.info("dollInfo=>" + JSON.toJSONString(dollInfo));
						shippingDao.saveDollOrderInfo(uid, uDollId, orderNum, userDoll.getDollId(), userDoll.getOptId(),
								dollInfo.getCompany()); // 娃娃订单信息
						userDollService.updateUserDollStatus(uDollId, 1); // 修改用户娃娃状态
					}
				}
				ApplyShippingRespVO respVO = new ApplyShippingRespVO();
				respVO.setCoin(tradeService.getAccount(uid).getCoin());
				respVO.setOrderNum(orderNum);
				return respVO;
			} else {
				return new ApplyShippingRespVO(-1, false, "交易失败,请重试");
			}
		} catch (TradeOperationException e) {
			return new ApplyShippingRespVO(-1, false, "交易失败,请重试");
		} catch (NotEnoughBeanException e) {
			return new ApplyShippingRespVO(600, false, "余额不足");
		} catch (Exception e) {
			PrintException.printException(LOG, e);
			return new BaseRespVO(-1, false, "系统异常，请稍后再试~");
		}
	}

	private long generateOrderNum() {
		String currDateStr = DateUtils.getCurrentDateString("yyyyMMddHHmmss");
		String randomNum = new Long(new Random().nextInt(900) + 100).toString();
		return Long.parseLong((currDateStr + randomNum));
	}
	public static void main(String[] args) {
		String currDateStr = DateUtils.getCurrentDateString("yyyyMMddHHmmss");
		String randomNum = new Long(new Random().nextInt(900) + 100).toString();
		System.out.println(Long.parseLong((currDateStr + randomNum)));
	}
	@Override
	public int getPostage(List<ApplyDollInfo> dollList, Long uid) {
		if (dollList != null && dollList.size() >= ShippingConstants.FREE_SHIPPING_SIZE) { // 超过指定免邮的娃娃个数
			return 0;
		} else {
			return ShippingConstants.POSTAGE;
		}
	}

	@Override
	public int getPostageRmb(List<ApplyDollInfo> dollList, Long uid) {
		List<ApplyDollInfo> inDollInfos = new ArrayList<ApplyDollInfo>(); // 允许单独发货的娃娃数量
		if(!StringUtil.isNullOrEmpty(dollList)) {
			for(ApplyDollInfo doll : dollList) {
				UserDoll userDoll = userDollService.getUserDollById(doll.getId());
				if(userDoll != null) {
					DollInfo dollInfo = dollInfoService.getDollInfo(userDoll.getDollId()); 
					if(dollInfo.getGoodsType() == 0 ) {
						inDollInfos.add(doll);
					}
				}
			}
		}
		if(inDollInfos.size() >= ShippingConstants.FREE_SHIPPING_SIZE) {
			return 0;
		} else {
			return 12;
		}
	}
	
	@Override
	public BaseRespVO phonebind(Long uid) {
		UserBase userBase = userService.getUserBase(uid);
		LOG.info("phonebind:" + JSON.toJSONString(userBase));
		if (userBase == null || (userBase != null && userBase.getNumber() == 0)) {
			return new BaseRespVO(ResCodeEnum.PHONE_BIND);
		}
		return new BaseRespVO();
	}

	@Override
	public String getShippingNotice() {
		DollShippingNotice shippingNotice = shippingDao.getShippingNotice();
		return shippingNotice == null ? "" : shippingNotice.getContent();
	}
	
	@Override
	public int updateOrderRecordPayStatus(long orderNum, int payStatus) {
		return shippingDao.updateOrderRecordPayStatus(orderNum, payStatus);
	}

	@Override
	public boolean handleShippingPayed(TradeCharge charge) {
		long orderNum=charge.getOrderNum();
		DollOrderRecord record=getDollOrderRecord(orderNum);
		if (record!=null) {
			if(record.getPayStatus()==OrderPayStatus.PAYED.status){
				LOG.info("handleShippingPayed 订单重复支付 orderNum："+orderNum+" uid:"+charge.getUid());
			}else if(record.getPayStatus()==OrderPayStatus.CANCEL.status){
				LOG.info("handleShippingPayed 订单已取消 orderNum："+orderNum+" uid:"+charge.getUid());
			}else if (record.getPayStatus()==OrderPayStatus.INIT.status) {
				LOG.info("handleShippingPayed 订单成功 orderNum："+orderNum+" uid:"+charge.getUid());
				LOG.info("handleShippingPayed 订单成功 orderNum："+orderNum+" uid:"+charge.getUid()+" OrderPayStatus.PAYED.status:"+OrderPayStatus.PAYED.status);
				updateOrderRecordPayStatus(orderNum, OrderPayStatus.PAYED.status);
				return true;
			}else{
				LOG.info("handleShippingPayed 订单异常状态 orderNum："+orderNum+" uid:"+charge.getUid()+" getPayStatus:"+record.getPayStatus());
			}
		}
		return false;
	}
	
	@Override
	public void handleShippingInvalid(){
		//查询出即将过期的订单
		DollOrderRecord record=shippingDao.getInvalidRecord(15);
		while (record!=null) {
			try {
				LOG.info("handleShippingInvalid 处理过期未支付订单 orderNum"+record.getOrderNum());
				if(updateOrderRecordPayStatus(record.getOrderNum(), OrderPayStatus.CANCEL.status)>0){
					resetDollStatus(record.getOrderNum());
				}
			} catch (Exception e) {
				PrintException.printException(LOG, e);
			}
			record=shippingDao.getInvalidRecord(15);
		}
	}
	
	/**
	 * 根据订单id重置娃娃状态
	 * @param orderNum
	 */
	public void resetDollStatus(long orderNum){
		List<DollOrderInfo> infos = getDollOrderInfos(orderNum);
		if (!StringUtil.isNullOrEmpty(infos)) {
			for (DollOrderInfo dollOrderInfo : infos) {
				if(dollOrderInfo!=null&&dollOrderInfo.getuDollId()>0){
					UserDoll userDoll = userDollService.getUserDollById(dollOrderInfo.getuDollId());
					if (userDoll!=null) {
						if(userDoll.getStatus()==DollStatus.APPLY_SUCC.status){
							int curDay = DateUtils.daysBetweenNow(DateUtils.dateToString(userDoll.getCreateTime(), "yyyy-MM-dd")) + 1; // 已寄存的天数
							if(curDay > PackConstants.SAVE_MAX_DAYS) { // 超过可以寄存的最大天数自动兑换
								DollInfo dollInfo = dollInfoService.getDollInfo(userDoll.getDollId());
								userDollService.handleAutoExchange(userDoll, dollInfo);
							} else {
								userDollService.updateUserDollStatus(userDoll.getId(), DollStatus.STORE.status);
							}
						}
					}
				}
			}
		}
	}
	
	@Override
	public List<DollOrderInfo> getDollOrderInfos(long orderNum) {
		return shippingDao.getDollOrderInfos(orderNum);
	}
	

	@Override
	public DollOrderRecord getDollOrderRecord(long orderNum) {
		return shippingDao.getDollOrderRecord(orderNum);
	}
}
