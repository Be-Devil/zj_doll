package com.imlianai.dollpub.app.modules.core.coinfactory.util;

import com.google.common.collect.Maps;
import com.imlianai.rpc.support.common.BaseLogger;
import com.imlianai.rpc.support.utils.MD5_HexUtil;
import com.imlianai.rpc.support.utils.StringUtil;

import java.util.Map;
import java.util.Random;
import java.util.UUID;

/**
 * @author wurui
 * @create 2018-06-30 11:34
 **/
public class PushCoinVirtualUtil {

    private static BaseLogger logger = BaseLogger.getLogger(PushCoinVirtualUtil.class);

    private static String pubKey = "zj-pub-key";

    private static Map<Integer, String> authMaps = Maps.newConcurrentMap();
    private static Map<Integer,Integer> coinNum =  Maps.newConcurrentMap();

    static {
        if (authMaps != null) {
            authMaps.put(1, "8c350e058edaceb760080826b2d666e7");
            authMaps.put(2, "fdbe28ddade4a7e7ead149a12557b2b6");
            authMaps.put(3, "07e763a19c4e7b8d139e6bbe21398ee0");
            authMaps.put(4, "fa2b85904c518c427b307b0359e14b5b");
            authMaps.put(5, "af297c53dc3e55438d162882fc7e8924");
            authMaps.put(6, "220a49f346aae0e4fdf68a1d6878f997");
            authMaps.put(7, "3e5428c4e006c72fbb1341b339ee29c9");
            authMaps.put(8, "2557131c04c39daaa9c2791519a36e87");
            authMaps.put(9, "303fb7e1b5671b60e08eee71a4e36c24");
            authMaps.put(10, "1547b3d86e95408774c568134032cf39");
        }
        if (coinNum != null){
            coinNum.put(1,80);
            coinNum.put(2,81);
            coinNum.put(3,82);
            coinNum.put(4,83);
            coinNum.put(5,84);
            coinNum.put(6,85);
            coinNum.put(7,86);
            coinNum.put(8,87);
            coinNum.put(9,88);
            coinNum.put(10,90);
        }
    }


    /**
     * 获取认证权限
     * @param key
     * @return
     */
    public static String getAuthMaps(int key) {
        if (!StringUtil.isNullOrEmpty(authMaps)) {
            return authMaps.get(key);
        }
        return null;
    }


    public static int getRandomType(){
        Random random = new Random();
        int randNum = random.nextInt(10) + 1;
        if (!StringUtil.isNullOrEmpty(authMaps) && !StringUtil.isNullOrEmpty(coinNum)){
            if (authMaps.get(randNum) != null){
                return randNum;
            }
        }
        return 0;
    }


    /**
     * 检验出币合法性验证算法
     * @param type
     * @param p1
     * @param p2
     * @param md5_value
     * @return
     */
    public static Map<String,Integer> verifyOutCoinIsValid(int type,String p1,String p2,String md5_value){
        Map<String,Integer> valueMaps = Maps.newConcurrentMap();
        String sign = getAuthMaps(type);
        if (sign != null && !"".equals(sign)){
            //认证方式 p1+p1=a
            logger.info("开始认证,加密类型=>" + type + ",加密串=>" + sign);
            if (p1 != null && p2 != null && md5_value != null){
                String str = p1 + p2;
                try {
                    logger.info("未处理过的的数据长度=>" + str.length() + ",源数据=>" + str);
                    if (str.length() == 98){
                        String data[] = str.split("@");
                        if (data.length == 3){
                            logger.info("处理截取后的数据长度=>" + data.length);
                            String t = data[0];
                            String z = data[1];
                            String y = data[2];

                            if (t != null && z != null && y != null &&
                                    t.length() == 32 &&
                                    z.length() == 32 &&
                                    y.length() == 32){

                                logger.info("参数认证无异常,开始匹配结果...");

                                int T = getVerifyValue(sign,t,1);
                                int Z = getVerifyValue(sign,z,0);
                                int Y = getVerifyValue(sign,y,0);

                                if (MD5_HexUtil.md5Hex(Y + sign).equals(md5_value)){

                                    logger.info("匹配成功: T=" + T + ",Z=" + Z + ",Y=" + Y);

                                    valueMaps.put("T",T);
                                    valueMaps.put("Z",Z);
                                    valueMaps.put("Y",Y);
                                }
                            }
                        }
                    }
                }catch (Exception e){
                    logger.info("认证解析异常=>" + e.getMessage());
                }
            }
        }
        return valueMaps;
    }


    /**
     * 验证算法: T0 + X = Tt + Z + Y
     * @param authType
     * @param X
     * @param Y
     * @param Z
     * @param T
     * @return
     */
    public static boolean VerifyValidity(int authType,int X,int Y,int Z,int T){
        if (!StringUtil.isNullOrEmpty(coinNum)){
            //推板金币数量
            int pushPlateCoinNum = coinNum.get(authType);
            if (pushPlateCoinNum != 0){
                // 验证公式 t + x = tt + z + y
                if (pushPlateCoinNum + X == T + Z + Y){
                    return true;
                }
            }
        }
        return false;
    }


    private static int getVerifyValue(String sign,String param,int index){
        if (param != null && !param.equals("")){

            if (index==1){
                for (int i = 45; i < 150;i++){
                    if (param.equals(MD5_HexUtil.md5Hex(i + sign))){
                        return i;
                    }
                }
            }else {
                for (int i = 0; i < 20;i++){
                    if (param.equals(MD5_HexUtil.md5Hex(i + sign))){
                        return i;
                    }
                }
            }
        }
        return 0;
    }


    public static void main(String[] args) {
        //生成10个密钥
//        for (int i = 0;i < 10;i++){
//            System.out.println(MD5_HexUtil.md5Hex(pubKey + UUID.randomUUID().toString().replace("-","")));
//        }

//        for (int i = 0;i < 1000;i++){
//            System.out.println(getRandomType());
//        }
//        String s = MD5_HexUtil.md5Hex("123456");
//        System.out.println(s);
//        System.out.println(s.length());


        int T = getVerifyValue("af297c53dc3e55438d162882fc7e8924","11f3a1191c6d6b507b9371cc67c1ea44",1);
        System.out.println(T);

        //System.out.println(MD5_HexUtil.md5Hex(85 + "af297c53dc3e55438d162882fc7e8924"));
    }

}
