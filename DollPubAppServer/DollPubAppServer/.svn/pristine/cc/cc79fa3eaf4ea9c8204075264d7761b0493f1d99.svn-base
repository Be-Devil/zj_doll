package com.imlianai.dollpub.app.modules.support.shopkeeper.service.impl;

import java.text.DecimalFormat;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.UUID;

import javax.annotation.Resource;

import org.springframework.stereotype.Service;

import com.google.common.collect.Lists;
import com.google.common.collect.Sets;
import com.imlianai.dollpub.app.modules.core.user.service.UserService;
import com.imlianai.dollpub.app.modules.publics.qiniu.service.QiNiuService;
import com.imlianai.dollpub.app.modules.support.robot.service.DollRobotService;
import com.imlianai.dollpub.app.modules.support.shopkeeper.dao.ShopkeeperIncomeRatioDao;
import com.imlianai.dollpub.app.modules.support.shopkeeper.dao.ShopkeeperIncomeRecordDao;
import com.imlianai.dollpub.app.modules.support.shopkeeper.dao.ShopkeeperInfoDao;
import com.imlianai.dollpub.app.modules.support.shopkeeper.dao.ShopkeeperInviteRecordDao;
import com.imlianai.dollpub.app.modules.support.shopkeeper.dao.ShopkeeperQRCodeDao;
import com.imlianai.dollpub.app.modules.support.shopkeeper.dao.ShopkeeperRankDao;
import com.imlianai.dollpub.app.modules.support.shopkeeper.dao.ShopkeeperWithdrawRecordDao;
import com.imlianai.dollpub.app.modules.support.shopkeeper.dto.FirstFriendDTO;
import com.imlianai.dollpub.app.modules.support.shopkeeper.dto.FriendTradeChargeDTO;
import com.imlianai.dollpub.app.modules.support.shopkeeper.dto.SecondFriendDTO;
import com.imlianai.dollpub.app.modules.support.shopkeeper.dto.ShopkeeperDayRankDTO;
import com.imlianai.dollpub.app.modules.support.shopkeeper.service.ShopkeeperService;
import com.imlianai.dollpub.app.modules.support.shopkeeper.vo.IncomeRespVO;
import com.imlianai.dollpub.domain.shopkeeper.ShopkeeperIncomeDay;
import com.imlianai.dollpub.domain.shopkeeper.ShopkeeperIncomeMonth;
import com.imlianai.dollpub.domain.shopkeeper.ShopkeeperIncomeRatio;
import com.imlianai.dollpub.domain.shopkeeper.ShopkeeperIncomeRecord;
import com.imlianai.dollpub.domain.shopkeeper.ShopkeeperInfo;
import com.imlianai.dollpub.domain.shopkeeper.ShopkeeperInviteRecord;
import com.imlianai.dollpub.domain.shopkeeper.ShopkeeperQRCode;
import com.imlianai.dollpub.domain.shopkeeper.ShopkeeperWithdrawRecord;
import com.imlianai.dollpub.domain.user.UserBase;
import com.imlianai.dollpub.domain.user.UserGeneral;
import com.imlianai.rpc.support.common.BaseLogger;
import com.imlianai.rpc.support.common.cmd.BaseRespVO;
import com.imlianai.rpc.support.utils.DateUtils;
import com.imlianai.rpc.support.utils.StringUtil;

/**
 * @author wurui
 * @create 2018-04-27 10:10
 **/
@Service
public class ShopkeeperServiceImpl implements ShopkeeperService {

    private final BaseLogger logger = BaseLogger.getLogger(getClass());

    @Resource
    private ShopkeeperInfoDao shopkeeperInfoDao;

    @Resource
    private ShopkeeperQRCodeDao shopkeeperQRCodeDao;

    @Resource
    private ShopkeeperWithdrawRecordDao shopkeeperWithdrawRecordDao;

    @Resource
    private ShopkeeperInviteRecordDao shopkeeperInviteRecordDao;

    @Resource
    private ShopkeeperIncomeRatioDao shopkeeperIncomeRatioDao;

    @Resource
    private ShopkeeperIncomeRecordDao shopkeeperIncomeRecordDao;

    @Resource
    private ShopkeeperRankDao shopkeeperRankDao;

    @Resource
    private UserService userService;

    @Resource
    private DollRobotService dollRobotService;
    
    @Resource
    QiNiuService qiNiuService;

    @Override
    public void initShopkeeper(long uid, long inviteUid) {
        logger.info("[初始化店主]创建店主=>" + uid);
        if (userService.getUserBase(uid) != null) {
            //判断是否为店主
            if (!this.isShopkeeper(uid)) {
                //创建店主
                int flag = shopkeeperInfoDao.init(new ShopkeeperInfo(uid));
                if (flag > 0) {
                    //处理邀请关系
                    this.inviteHandle(uid, inviteUid);
                }
            }
        }
    }

    @Override
    public boolean isShopkeeper(long uid) {
        boolean flag = false;
        ShopkeeperInfo shopkeeperInfo = shopkeeperInfoDao.getInfoByUid(uid);
        if (shopkeeperInfo != null) {
            flag = true;
        }
        return flag;
    }

    @Override
    public ShopkeeperQRCode getShopkeeperQRCode(long uid) {
    	ShopkeeperQRCode shopkeeperQRCode=shopkeeperQRCodeDao.getQRCode(uid);
    	if (shopkeeperQRCode==null) {
			initQrcode(uid, 0, "[0]自主注册创建该二维码");
		}else if (StringUtil.isNullOrEmpty(shopkeeperQRCode.getUrl())) {
			updateQrcode(uid);
			shopkeeperQRCode=shopkeeperQRCodeDao.getQRCode(uid);
		}
        return shopkeeperQRCode;
    }

    @Override
    public List<ShopkeeperDayRankDTO> getShopkeeperDayRank() {
        List<ShopkeeperDayRankDTO> dtoList = Lists.newArrayList();
        List<ShopkeeperIncomeDay> incomeDayList = shopkeeperRankDao.getIncomeDayRank(DateUtils.getNowDate());
        if (!StringUtil.isNullOrEmpty(incomeDayList)) {
            int rank = 1;
            for (ShopkeeperIncomeDay incomeDay : incomeDayList) {
                dtoList.add(ShopkeeperDayRankDTO.adapter(incomeDay, rank));
                rank++;
            }
        }
        return dtoList;
    }

    @Override
    public void inviteHandle(long uid, long inviteUid) {

        // 图片连接可能是 ：

        //      存在关系：
        //          www.img?inviteUid=100&uid=123   说明 123是被100邀请进来的
        //          www.img?inviteUid=123&uid=456   说明 456是被123邀请进来的
        //          www.img?inviteUid=456&uid=789   说明 789是被456邀请进来的

        //      不存在关系：
        //          www.img?inviteUid=0&uid=200   说明 200是自己注册创建的

        UserGeneral registerUser = userService.getUserGeneral(uid);
        if (registerUser != null) {

            String remark = "";

            //判断是否是邀请的用户->邀请者不为0说明是扫描店主进来的
            if (inviteUid != 0) {
                //更新邀请次数
                if (shopkeeperInfoDao.updateTotalInviteNum(inviteUid, 1) > 0) {
                    remark = "[1]通过邀请注册创建该二维码";

                    //判断邀请次数更换店主类型
                    this.updateShopkeeperLevel(inviteUid);

                    //直接邀请记录
                    if (shopkeeperInviteRecordDao.addRecord(new ShopkeeperInviteRecord(uid, 0, inviteUid,
                            "成功邀请朋友 " + registerUser.getName() + " 加入")) > 0) {
                        logger.info("生成直接邀请记录");
                    }

                    //判断是否存在最上级邀请者
                    ShopkeeperQRCode topInviteUser = shopkeeperQRCodeDao.getQRCode(inviteUid);
                    if (topInviteUser != null && topInviteUser.getInviteUid() != 0) {
                        UserGeneral friend = userService.getUserGeneral(inviteUid);
                        if (friend != null) {
                            //记录顶级邀请者记录
                            if (shopkeeperInviteRecordDao.addRecord(new ShopkeeperInviteRecord(uid, inviteUid, topInviteUser.getInviteUid(),
                                    "好友 " + friend.getName() + " 邀请了 " + registerUser.getName() + " 加入")) > 0) {
                                logger.info("生成最上级邀请记录");
                            }
                        }
                    }
                }

            } else {
                //自主注册开店
                remark = "[0]自主注册创建该二维码";
            }

            //long code = this.initInviteCode();
            initQrcode(uid, inviteUid, remark);
        }
    }

    private void initQrcode(long uid,long inviteUid,String remark){
    	String uuid = UUID.randomUUID().toString().replace("-", "");
    	if (shopkeeperQRCodeDao.init(new ShopkeeperQRCode(uid, inviteUid, "", "", uuid, 0, remark)) > 0) {
            logger.info("[初始化店主]新增二维码记录");
            updateQrcode(uid);
        }
    }
    
    private void updateQrcode(long uid){
    	 UserBase userBase= userService.getUserBase(uid);
         String targetUrl="http://www.realgamecloud.com/api/inviteOauth/wxAuth/84/134/"+uid+"/?appid=wx85cf26e3d3d976ec";
         if (userBase!=null) {
				targetUrl="http://www.realgamecloud.com/api/inviteOauth/wxAuth/"+userBase.getCustomerId()+"/"+userBase.getAgentId()+"/"+uid+"/?appid=wx85cf26e3d3d976ec";
         }
         String imgUrl = qiNiuService.getInviteShopPic(targetUrl);
         String data = "?inviteUid=" + uid;
         if (shopkeeperQRCodeDao.updateQRCodeImgAndData(new ShopkeeperQRCode(uid, imgUrl, data)) > 0) {
             logger.info("更新二维码数据成功....");
         }
    }
    @Override
    public void chargeHandle(long uid, int chargeMoney) {
        UserGeneral chargeUser = userService.getUserGeneral(uid);
        if (chargeUser != null) {
            ShopkeeperQRCode first = shopkeeperQRCodeDao.getQRCode(uid);
            if (first != null) {
                DecimalFormat df = new DecimalFormat("#");
                long inviteUid = first.getInviteUid();
                if (inviteUid != 0) {
                    //一级分成
                    ShopkeeperInfo shopkeeperInfo = shopkeeperInfoDao.getInfoByUid(inviteUid);
                    if (shopkeeperInfo != null) {
                        int firstRatio = this.getIncomeRatio(inviteUid, 1);
                        if (firstRatio != 0) {
                            int firstIncome = Integer.valueOf(df.format(1.0 * chargeMoney * firstRatio / 100));
                            if (this.addIncome(shopkeeperInfo.getUid(),
                                    new ShopkeeperIncomeRecord(shopkeeperInfo.getUid(),
                                            uid, chargeMoney, shopkeeperInfo.getRatioId(), firstIncome, 1, shopkeeperInfo.getTotalInviteNum(), "来自一级分成")) > 0) {
                                logger.info("处理来自一级分成收益成功");
                            }
                        }
                    }


                    ShopkeeperQRCode second = shopkeeperQRCodeDao.getQRCode(inviteUid);
                    if (second != null) {
                        long inviteUidTop = second.getInviteUid();
                        if (inviteUidTop != 0) {
                            //二级分成
                            ShopkeeperInfo second_shopkeeperInfo = shopkeeperInfoDao.getInfoByUid(inviteUidTop);
                            if (second_shopkeeperInfo != null) {
                                int secondRatio = this.getIncomeRatio(inviteUidTop, 2);
                                if (secondRatio != 0) {
                                    int secondIncome = Integer.valueOf(df.format(1.0 * chargeMoney * secondRatio / 100));
                                    if (this.addIncome(second_shopkeeperInfo.getUid(),
                                            new ShopkeeperIncomeRecord(second_shopkeeperInfo.getUid(),
                                                    uid, chargeMoney, second_shopkeeperInfo.getRatioId(), secondIncome, 2, second_shopkeeperInfo.getTotalInviteNum(), "来自二级分成")) > 0) {
                                        logger.info("处理来自二级分成收益成功");
                                    }
                                }
                            }
                        }
                    }
                } else {
                    logger.info("该用户并没有上一级=>" + uid);
                }
            }
        }
    }
    
    @Override
    public ShopkeeperInfo getShopkeeperInfo(long uid){
    	ShopkeeperInfo info = shopkeeperInfoDao.getInfoByUid(uid);
    	return info;
    }
    
    @Override
    public BaseRespVO getShopkeeperWalletInfo(long uid) {
        ShopkeeperInfo info = shopkeeperInfoDao.getInfoByUid(uid);
        if (info != null) {
            IncomeRespVO incomeRespVO = new IncomeRespVO();
            incomeRespVO.setTotalIncome((double) info.getTotalIncomeMoney() / 100);//累积收入
            incomeRespVO.setCanWithdrawMoney((double) info.getTotalCanWithdrawMoney() / 100);//可提现

            //处理从一级和二级得来的收入
            List<ShopkeeperIncomeRecord> records = shopkeeperIncomeRecordDao.getRecordList(info.getUid());
            int first = 0;
            int second = 0;
            if (!StringUtil.isNullOrEmpty(records)) {
                for (ShopkeeperIncomeRecord record : records) {
                    if (record.getLevel() == 1) {
                        first += record.getDivideIncome();
                    }
                    if (record.getLevel() == 2) {
                        second += record.getDivideIncome();
                    }
                }
            }
            incomeRespVO.setFirstDivide(first != 0 ? (double) first / 100 : 0);
            incomeRespVO.setSecondDivide(second != 0 ? (double) second / 100 : 0);


            //处理邀请记录
            List<ShopkeeperInviteRecord> firstInviteRecord = shopkeeperInviteRecordDao.getRecord(info.getUid(), 1);
            List<ShopkeeperInviteRecord> secondInviteRecord = shopkeeperInviteRecordDao.getRecord(info.getUid(), 2);
            Set<Long> uIds = Sets.newHashSet();
            if (!StringUtil.isNullOrEmpty(firstInviteRecord)) {
                incomeRespVO.setFirstFriend(firstInviteRecord.size());
                for (ShopkeeperInviteRecord record : firstInviteRecord) {
                    uIds.add(record.getUid());//1级
                }
            }
            if (!StringUtil.isNullOrEmpty(secondInviteRecord)) {
                incomeRespVO.setSecondFriend(secondInviteRecord.size());
                for (ShopkeeperInviteRecord record : secondInviteRecord) {
                    uIds.add(record.getUid());//2级
                }
            }

            Map<Long, UserGeneral> userGeneralMap = userService.getUserGeneralMap(Lists.newArrayList(uIds));

            //好友充值记录
            List<FriendTradeChargeDTO> tradeChargeDTOS = Lists.newArrayList();
            List<ShopkeeperIncomeRecord> incomeRecords = shopkeeperIncomeRecordDao.getRecordList(info.getUid());
            if (!StringUtil.isNullOrEmpty(incomeRecords)){
                incomeRespVO.setTotalTradeNum(incomeRecords.size());
                for (ShopkeeperIncomeRecord record:incomeRecords ){
                    tradeChargeDTOS.add(FriendTradeChargeDTO.adapter(record,userGeneralMap.get(record.getChargeUid())));
                }
            }
            incomeRespVO.setTradeRecord(tradeChargeDTOS);


            //已邀请一级好友列表
            List<FirstFriendDTO> firstFriendDTOList = Lists.newArrayList();
            if (!StringUtil.isNullOrEmpty(userGeneralMap)) {
                if (!StringUtil.isNullOrEmpty(firstInviteRecord)) {
                    for (ShopkeeperInviteRecord record : firstInviteRecord) {
                        UserGeneral userGeneral = userGeneralMap.get(record.getUid());
                        if (userGeneral != null) {
                            firstFriendDTOList.add(
                                    new FirstFriendDTO(
                                            userGeneral.getName(),
                                            userGeneral.getHead(),
                                            DateUtils.dateToString(record.getInviteTime())));
                        }
                    }
                }
            }
            incomeRespVO.setFistList(firstFriendDTOList);


            //已邀请二级好友列表
            List<SecondFriendDTO> secondFriendDTOList = Lists.newArrayList();
            if (!StringUtil.isNullOrEmpty(userGeneralMap)) {
                if (!StringUtil.isNullOrEmpty(secondInviteRecord)) {
                    for (ShopkeeperInviteRecord record : secondInviteRecord) {
                        UserGeneral userGeneral = userGeneralMap.get(record.getUid());
                        if (userGeneral != null) {
                            secondFriendDTOList.add(
                                    new SecondFriendDTO(
                                            userGeneral.getName(),
                                            userGeneral.getHead(),
                                            DateUtils.dateToString(record.getInviteTime())));
                        }
                    }
                }
            }
            incomeRespVO.setSecondList(secondFriendDTOList);


            //处理月总收入
            List<ShopkeeperIncomeRecord> monthIncomeRecords = shopkeeperIncomeRecordDao.getRecordSameMonth(info.getUid());
            int monthIncome = 0;
            if (!StringUtil.isNullOrEmpty(monthIncomeRecords)) {
                for (ShopkeeperIncomeRecord record : monthIncomeRecords) {
                    monthIncome += record.getDivideIncome();
                }
            }
            incomeRespVO.setNowMonthIncome(monthIncome != 0 ? (double) monthIncome / 100 : 0);

            //处理月总提现
            List<ShopkeeperWithdrawRecord> monthWithdrawRecords = shopkeeperWithdrawRecordDao.getMonthRecord(info.getUid());
            int monthWithdraw = 0;
            if (!StringUtil.isNullOrEmpty(monthWithdrawRecords)) {
                for (ShopkeeperWithdrawRecord record : monthWithdrawRecords) {
                    monthWithdraw += record.getaMoney();
                }
            }
            incomeRespVO.setNowMonthWithdraw(monthWithdraw != 0 ? (double) monthWithdraw / 100 : 0);

            incomeRespVO.setResult(100);
            incomeRespVO.setMsg("数据请求成功");
            incomeRespVO.setState(true);
            return incomeRespVO;

        }
        return new BaseRespVO(0, false, "请先成为店主!");
    }

    @Override
    public BaseRespVO applyWithdraw(long uid, int money) {
        UserBase userBase = userService.getUserBase(uid);
        ShopkeeperInfo info = shopkeeperInfoDao.getInfoByUid(uid);

        if (userBase != null) {
            //验证手机号
            if (userBase.getNumber() == 0)
                return new BaseRespVO(101, false, "未验证手机号");
            //验证关注公众号
            if (userBase.getDiyihh() == 0)
                return new BaseRespVO(102, false, "未关注公众号");
            if (info != null) {
                if (info.getStatus() == 0)
                    return new BaseRespVO(0, false, "该店已经被关闭，联系客服！");
                if (info.getWithdrawFn() == 0)
                    return new BaseRespVO(0, false, "该账号提现功能暂不能使用，如有疑问，请联系客服！");
                if (money == 0)
                    return new BaseRespVO(0, false, "提现金额必须大于0");
                if (money > info.getTotalCanWithdrawMoney())
                    return new BaseRespVO(0, false, "提现金额大于可提现金额");
                if (money < info.getMinWithdrawMoney() * 100)
                    return new BaseRespVO(0, false, "单笔提现金额不能少于10元");
                if (money > info.getMaxWithdrawMoney() * 100)
                    return new BaseRespVO(0, false, "大额提现请联系客服");

                List<ShopkeeperWithdrawRecord> withdrawRecordList = shopkeeperWithdrawRecordDao.getDayRecord(info.getUid(), DateUtils.getNowDate());
                if (!StringUtil.isNullOrEmpty(withdrawRecordList) && withdrawRecordList.size() > info.getTotalWithdrawDay()) {
                    return new BaseRespVO(0, false, "每天只能提现" + info.getTotalWithdrawDay() + "次，请明天再来！");
                }

                try {
                    //扣费
                    int flag = shopkeeperInfoDao.updateTotalCanWithdraw(info.getUid(), -money);
                    if (flag > 0) {
                        logger.info("店长=>" + uid + ",提现=>" + money);
                        //生成记录
                        if (shopkeeperWithdrawRecordDao.addRecord(new ShopkeeperWithdrawRecord(info.getUid(), info.getTotalCanWithdrawMoney(), money, info.getTotalCanWithdrawMoney() - money, 0, "店长申请提现=> " + money + " 分")) > 0) {
                            logger.info("生成提现流水记录");
                        }
                        //更新总提现
                        if (shopkeeperInfoDao.updateTotalWithdraw(info.getUid(), money) > 0) {
                            logger.info("总提现金额+" + money);
                        }
                        return new BaseRespVO(100, true, "提现申请已成功提交，通过后将在3个工作日内发放");
                    }
                } catch (Exception e) {
                    logger.info(e.getMessage());
                }
            } else {
                return new BaseRespVO(0, false, "请先成为店长");
            }
        }
        return new BaseRespVO(0, false, "用户不存在");
    }

    @Override
    public List<ShopkeeperWithdrawRecord> getWithdrawRecord(long uid) {
        return shopkeeperWithdrawRecordDao.getRecord(uid);
    }

    @Override
    public void incomeRobot() {

        Long uid = dollRobotService.getRandomRobotUid();
        if (uid != null){




        }


    }

    @Override
    public int updateShopkeeperStatus(int status,long uid) {
        return shopkeeperInfoDao.updateStatus(status,uid);
    }


    /**
     * 初始化邀请码
     *
     * @return
     */
    private long initInviteCode() {
        long code = 0;
        for (int i = 0; i < 10; i++) {// 最多重试10次
            long location = StringUtil.getRanDom(10423527, 98833998);
            code = shopkeeperQRCodeDao.getInviteCode(location);
            if (code > 0)
                break;
        }
        return code;
    }


    /**
     * 获取收益比例
     *
     * @param uid
     * @param firstOrSecondType 1:一级，2:二级
     * @return
     */
    private int getIncomeRatio(long uid, int firstOrSecondType) {
        ShopkeeperInfo shopkeeperInfo = shopkeeperInfoDao.getInfoByUid(uid);
        if (shopkeeperInfo != null) {
            ShopkeeperIncomeRatio ratio = shopkeeperIncomeRatioDao.getRatioById(shopkeeperInfo.getRatioId());
            if (ratio != null && ratio.getStatus() != 1) {
                if (firstOrSecondType == 1) {
                    return ratio.getFirstRatio();
                }
                if (firstOrSecondType == 2) {
                    return ratio.getSecondRatio();
                }
            }
        }
        return 0;
    }


    /**
     * 更新店主层级
     *
     * @param uid
     */
    private void updateShopkeeperLevel(long uid) {
        ShopkeeperInfo shopkeeperInfo = shopkeeperInfoDao.getInfoByUid(uid);
        if (shopkeeperInfo != null) {
            ShopkeeperIncomeRatio ratio = shopkeeperIncomeRatioDao.getRatioById(shopkeeperInfo.getRatioId());
            if (ratio != null) {
                //已经是超级店主
                if (shopkeeperInfo.getRatioId() == 2) {
                    return;
                }
                if (shopkeeperInfo.getRatioId() == ratio.getId() && shopkeeperInfo.getTotalInviteNum() >= ratio.getInviteNum()) {
                    //变成超级店主
                    if (shopkeeperInfoDao.updateTypeAndRatio(uid, 1, 2) > 0) {
                        logger.info("店主角色转换成[超级店主]");
                    }
                }
            }
        }
    }

    /**
     * 新增收益
     * @param uid
     * @param record
     * @return
     */
    private int addIncome(long uid, ShopkeeperIncomeRecord record) {
        try {
            //新增收益记录
            if (shopkeeperIncomeRecordDao.addRecord(record) > 0) {
                UserGeneral userGeneral = userService.getUserGeneral(uid);
                if (userGeneral != null) {
                    logger.info("增加收益记录日志");

                    //总收益
                    if (shopkeeperInfoDao.updateTotalIncome(uid, record.getDivideIncome()) > 0) {
                        logger.info("更新店主总收益金额");
                    }
                    //可提现
                    if (shopkeeperInfoDao.updateTotalCanWithdraw(uid, record.getDivideIncome()) > 0) {
                        logger.info("更新店主可提现金额");
                    }
                    //日收益榜单
                    if (shopkeeperRankDao.insertOrUpdateIncomeDay(new ShopkeeperIncomeDay(uid, DateUtils.getNowDate(), userGeneral.getHead(), userGeneral.getName(), record.getDivideIncome())) > 0) {
                        logger.info("更新店主日收入榜单");
                    }
                    //月收益榜单
                    if (shopkeeperRankDao.insertOrUpdateIncomeMonth(new ShopkeeperIncomeMonth(uid, DateUtils.getCurrentDateString("yyyy-MM"), userGeneral.getHead(), userGeneral.getName(), record.getDivideIncome())) > 0) {
                        logger.info("更新店主月收入榜单");
                    }
                    return 1;
                }
            }
        } catch (Exception e) {
            logger.info(e.getMessage());
        }
        return 0;
    }

	@Override
	public ShopkeeperWithdrawRecord getRecordToPay(int size) {
		return shopkeeperWithdrawRecordDao.getRecordToPay(size);
	}

	@Override
	public int updatePayState(int id, int payState) {
		return shopkeeperWithdrawRecordDao.updatePayState(id, payState);
	}

	@Override
	public int updateRemark(long id, String remark) {
		return shopkeeperWithdrawRecordDao.updateRemark(id, remark);
	}

}
