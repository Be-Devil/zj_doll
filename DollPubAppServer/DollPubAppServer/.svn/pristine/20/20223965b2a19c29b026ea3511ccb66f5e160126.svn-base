package com.imlianai.dollpub.app.modules.core.trade.callback.service;

import java.util.Date;

import javax.annotation.Resource;

import org.springframework.stereotype.Service;

import com.imlianai.dollpub.app.modules.core.trade.catalog.service.ChargeCatalogService;
import com.imlianai.dollpub.app.modules.core.trade.service.TradeChargeService;
import com.imlianai.dollpub.app.modules.core.trade.service.TradeService;
import com.imlianai.dollpub.app.modules.core.user.service.UserService;
import com.imlianai.dollpub.app.modules.publics.log.service.LogService;
import com.imlianai.dollpub.app.modules.publics.msg.service.MsgService;
import com.imlianai.dollpub.app.modules.support.event.newyearRecharge20180207.service.EventNewyearRecharge20180207Service;
import com.imlianai.dollpub.domain.log.LogPage;
import com.imlianai.dollpub.domain.msg.MsgNotice;
import com.imlianai.dollpub.domain.msg.MsgType;
import com.imlianai.dollpub.domain.trade.ChargeCatalog;
import com.imlianai.dollpub.domain.trade.TradeAccount;
import com.imlianai.dollpub.domain.trade.TradeCharge;
import com.imlianai.dollpub.domain.trade.TradeCostType;
import com.imlianai.dollpub.domain.trade.TradeRecord;
import com.imlianai.dollpub.domain.trade.TradeType;
import com.imlianai.rpc.support.common.BaseLogger;
import com.imlianai.rpc.support.utils.DateUtils;

@Service
public class PayBackExcuteServiceImpl implements PayBackExcuteService {

	private final BaseLogger logger = BaseLogger
			.getLogger(PayBackExcuteServiceImpl.class);

	@Resource
	private UserService userService;
	@Resource
	private TradeChargeService tradeChargeService;
	@Resource
	private ChargeCatalogService chargeCatalogService;
	@Resource
	private TradeService tradeService;
	@Resource
	private LogService logService;

	@Resource
	private MsgService msgService;
	
	@Resource
	EventNewyearRecharge20180207Service eventNewyearRecharge20180207Service;

	@Override
	public void commonExcute(TradeCharge c) {
		try {
			logService.add(LogPage.CHARGE, c, this.getClass());
			ChargeCatalog item = chargeCatalogService.getCatalog(c
					.getItemCode());
			if (item.getIsFirst()==1) {
				long lastId=tradeChargeService.hasChargeSpecialAmt(c.getUid(), item.getCode());
				if (lastId!=c.getId()) {//成功的订单不是此笔订单
					item.setAwardExtra(0);
				}
			}
			String priceString=item.getPrice()+(item.getUnit()==0?"元":"分");
			try {
				if (item.getUnit()==1) {
					priceString=item.getPrice()/100+"分";
				}
			} catch (Exception e) {
				// TODO: handle exception
			}
			StringBuffer msgBuffer = new StringBuffer("恭喜，充值成功！充值金额：");
			StringBuffer tradeBuffer = new StringBuffer("充值"+priceString+"，获得"+item.getCoin()+"币");
			msgBuffer.append(priceString);
			msgBuffer.append("，获得" + item.getCoin() + "币");
			if (item.getAwardExtra() > 0) {
				msgBuffer.append("，额外赠送");
				msgBuffer.append(item.getAwardExtra());
				msgBuffer.append("币");
				tradeBuffer.append("，额外赠送");
				tradeBuffer.append(item.getAwardExtra());
				tradeBuffer.append("币");
			}
			TradeRecord record = new TradeRecord(c.getUid(), c.getUid(),
					TradeType.CHARGE.type, item.getCode(), item.getCoin()+item.getAwardExtra(),
					TradeCostType.COST_COIN.type, tradeBuffer.toString());
			tradeService.charge(record);
			TradeAccount account = tradeService.getAccount(c.getUid());
			if (account != null) {
				msgBuffer.append("，当前余额：");
				msgBuffer.append(account.getCoin());
			}
			MsgNotice msg = new MsgNotice(c.getUid(), MsgType.NOTICE_SYS.type,
					msgBuffer.toString());
			msg.setPushMsg(msgBuffer.toString());
			msg.setJumpCharge();
			msgService.sendMsg(msg);
			eventNewyearRecharge20180207Service.handleRecharge(c.getCost(), c.getUid());
		} catch (Exception e) {
			logger.info(e);
			logger.error(e, e);
		}
	}

	public static void main(String[] args) {
		System.out.println(DateUtils.dateToString(new Date(1477324799000l),
				DateUtils.DATETIME_PATTERN));
	}
}
