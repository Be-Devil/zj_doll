package com.imlianai.dollpub.app.modules.core.coinfactory.service.impl;

import com.alibaba.fastjson.JSON;
import com.google.common.collect.Maps;
import com.imlianai.dollpub.app.modules.core.coinfactory.util.PushCoinVirtualUtil;
import com.imlianai.dollpub.app.modules.core.coinfactory.dao.PushBusStatusVirtualDao;
import com.imlianai.dollpub.app.modules.core.coinfactory.dao.PushCoinVirtualMachineDao;
import com.imlianai.dollpub.app.modules.core.coinfactory.dao.PushCoinVirtualOptRouterDao;
import com.imlianai.dollpub.app.modules.core.coinfactory.dao.PushCoinVirtualRoomDao;
import com.imlianai.dollpub.app.modules.core.coinfactory.service.PushCoinUnity3DService;
import com.imlianai.dollpub.app.modules.core.coinfactory.vo.ApplyRespVO;
import com.imlianai.dollpub.app.modules.core.coinfactory.vo.EntryVirtualRoomReqVO;
import com.imlianai.dollpub.app.modules.core.doll.bus.DollBusService;
import com.imlianai.dollpub.app.modules.core.user.customer.service.CustomerService;
import com.imlianai.dollpub.domain.coinfactory.MachinePushCoinVirtual;
import com.imlianai.dollpub.domain.coinfactory.PushBusStatusVirtual;
import com.imlianai.dollpub.domain.coinfactory.VirtualPushCoinRoom;
import com.imlianai.dollpub.domain.customer.Customer;
import com.imlianai.dollpub.domain.doll.DollBus;
import com.imlianai.rpc.support.common.BaseLogger;
import com.imlianai.rpc.support.common.cmd.BaseRespVO;
import com.imlianai.rpc.support.utils.StringUtil;
import org.springframework.stereotype.Service;

import javax.annotation.Resource;
import java.util.Map;

/**
 * @author wurui
 * @create 2018-06-30 11:07
 **/
@Service
public class PushCoinUnity3DServiceImpl implements PushCoinUnity3DService {

    private BaseLogger logger = BaseLogger.getLogger(getClass());


    @Resource
    private DollBusService dollBusService;

    //全表
    @Resource
    private PushCoinVirtualMachineDao pushCoinVirtualMachineDao;

    //带分表
    @Resource
    private PushCoinVirtualOptRouterDao pushCoinVirtualOptRouterDao;

    @Resource
    private PushCoinVirtualRoomDao pushCoinVirtualRoomDao;

    @Resource
    private CustomerService customerService;

    @Resource
    private PushBusStatusVirtualDao pushBusStatusVirtualDao;

    @Override
    public BaseRespVO apply(long uid, int busId, Customer customer) {

        logger.info("虚拟机器上机,机器ID=>"+busId+",上机用户=>" + uid + ",商户=>" + JSON.toJSONString(customer));

        DollBus dollBus = dollBusService.getDollBus(busId);
        if (dollBus != null && dollBus.getVirtual() == 1){
            if (dollBus.getType() == 1){

                PushBusStatusVirtual pushBusStatusVirtual = pushBusStatusVirtualDao.get(dollBus.getBusId(),uid,customer.getId());
                if (pushBusStatusVirtual != null){
                    return new BaseRespVO(6,false,"请勿重复上机!");
                }

                VirtualPushCoinRoom virtualPushCoinRoom = pushCoinVirtualRoomDao.getWatchBus(customer.getId(),uid);
                if (virtualPushCoinRoom != null){
                    if (virtualPushCoinRoom.getBusId() == dollBus.getBusId()){
                        logger.info("条件认证成功,开始上机操作 uid=>" + uid + ",busId=>" + busId);

                        MachinePushCoinVirtual machinePushCoinVirtual = new MachinePushCoinVirtual();
                        machinePushCoinVirtual.setBusId(dollBus.getBusId());
                        machinePushCoinVirtual.setCustomerId(customer.getId());
                        machinePushCoinVirtual.setDeviceId(dollBus.getDeviceId());
                        machinePushCoinVirtual.setUid(uid);
                        machinePushCoinVirtual.setAuthType(virtualPushCoinRoom.getAuthType());
                        long optId = pushCoinVirtualMachineDao.insert(machinePushCoinVirtual);
                        if (optId > 0){
                            logger.info("新增全表操作记录成功");
                            machinePushCoinVirtual.setOptId(optId);
                            if(pushCoinVirtualOptRouterDao.insert(customer.getGroupId(),machinePushCoinVirtual) > 0){
                                logger.info("新增推币机分表操作流水=>" + JSON.toJSONString(machinePushCoinVirtual));

                                int playTime = 30;
                                //状态
                                if (pushBusStatusVirtualDao.insert(new PushBusStatusVirtual(dollBus.getBusId(), dollBus.getDeviceId(), optId, uid,customer.getId()), playTime) > 0) {
                                    logger.info("新增上次操作状态,游戏时间=>" + playTime + "秒");
                                    ApplyRespVO vo = new ApplyRespVO();
                                    vo.setMsg("上机成功!");
                                    vo.setResult(200);
                                    vo.setState(true);
                                    vo.setOptId(optId);
                                    vo.setPlayTime(playTime);
                                    return vo;
                                }
                            }
                        }
                    }else {
                        return new BaseRespVO(4,false,"房间号错误!");
                    }
                }else {
                    return new BaseRespVO(3,false,"请先进入房间!");
                }
            }else {
                return new BaseRespVO(2,false,"上机失败,当前机器不是推币机");
            }
        }else {
            return new BaseRespVO(1,false,"上机失败,当前机器不是虚拟机");
        }
        return new BaseRespVO(5,false,"上机操作失败!");
    }

    @Override
    public BaseRespVO putCoin(long uid, int busId, Customer customer) {
        DollBus dollBus = dollBusService.getDollBus(busId);
        if (dollBus != null && dollBus.getVirtual() == 1){
            if (dollBus.getType() == 1){
                PushBusStatusVirtual pushBusStatusVirtual = pushBusStatusVirtualDao.get(busId,uid,customer.getId());
                if (pushBusStatusVirtual != null){
                    MachinePushCoinVirtual machinePushCoinVirtual = pushCoinVirtualMachineDao.getOne(pushBusStatusVirtual.getOptId());
                    if (machinePushCoinVirtual != null){
                        int flag = pushCoinVirtualMachineDao.updateCoin(pushBusStatusVirtual.getOptId(),1,0);
                        if (flag > 0){
                            return new BaseRespVO(200,true,"成功投入1币!");
                        }else {
                            return new BaseRespVO(3,false,"投币失败,当前操作已结束!");
                        }
                    }else {
                        return new BaseRespVO(4,false,"相关记录不存在!");
                    }
                }else {
                    return new BaseRespVO(5,false,"请先上机!");
                }
            }else {
                return new BaseRespVO(0,false,"投币失败,不是推币机类型!");
            }
        }
        return new BaseRespVO(1,false,"机器不存在或类型错误!");
    }

    @Override
    public BaseRespVO operate(long uid, int busId,Customer customer) {
        DollBus dollBus = dollBusService.getDollBus(busId);
        if (dollBus != null && dollBus.getVirtual() == 1){
            if (dollBus.getType() == 1){
                PushBusStatusVirtual pushBusStatusVirtual = pushBusStatusVirtualDao.get(busId,uid,customer.getId());
                if (pushBusStatusVirtual != null){
                    return new BaseRespVO(200,true,"执行摆动!");
                }else {
                    return new BaseRespVO(5,false,"请先上机!");
                }
            }else {
                return new BaseRespVO(0,false,"投币失败,不是推币机类型!");
            }
        }
        return new BaseRespVO(1,false,"机器不存在或类型错误!");
    }

    @Override
    public BaseRespVO finish(long uid, int busId,Customer customer) {
        PushBusStatusVirtual pushBusStatusVirtual = pushBusStatusVirtualDao.get(busId,uid,customer.getId());
        if (pushBusStatusVirtual != null){
            int flag = pushBusStatusVirtualDao.delete(busId,pushBusStatusVirtual.getOptId());
            if (flag > 0){
                if(pushCoinVirtualMachineDao.updateState(pushBusStatusVirtual.getOptId()) > 0){
                    logger.info("更改总表状态成功.");
                }
                if(pushCoinVirtualOptRouterDao.updateState(customer.getGroupId(),pushBusStatusVirtual.getOptId()) > 0 ){
                    logger.info("更改分表状态成功.");
                }
                return new BaseRespVO(200,true,"成功下机");
            }
        }
        return new BaseRespVO(201,true,"状态不存在,无需下机");
    }

    @Override
    public BaseRespVO entryVirtualCoinPushRoom(EntryVirtualRoomReqVO reqVO) {
        DollBus dollBus = dollBusService.getDollBus(reqVO.getBusId());
        if (dollBus != null && dollBus.getVirtual() == 1){
            Customer customer = customerService.getCustomer(reqVO.getAppId());
            if (customer != null){
                int authType = PushCoinVirtualUtil.getRandomType();
                if (authType > 0){
                    VirtualPushCoinRoom virtualPushCoinRoom = new VirtualPushCoinRoom();
                    virtualPushCoinRoom.setAuthType(authType);
                    virtualPushCoinRoom.setBusId(reqVO.getBusId());
                    virtualPushCoinRoom.setCustomerId(customer.getId());
                    virtualPushCoinRoom.setUid(reqVO.getUid());
                    if(pushCoinVirtualRoomDao.addWatchRecord(virtualPushCoinRoom) > 0){
                        BaseRespVO respVO = new BaseRespVO(200,true,"数据请求成功");
                        respVO.setData(authType);
                        return respVO;
                    }
                }
                return new BaseRespVO(0,false,"生成认证类型错误");
            }else{
                return new BaseRespVO(0,false,"当前商户不存在");
            }
        }
        return new BaseRespVO(0,false,"机器不存在或类型不正确.");
    }

    @Override
    public BaseRespVO laveVirtualCoinPushRoom(EntryVirtualRoomReqVO reqVO) {
        Customer customer = customerService.getCustomer(reqVO.getAppId());
        if (customer != null){
            int flag = pushCoinVirtualRoomDao.laveVirtualRoom(customer.getId(),reqVO.getUid());
            if (flag > 0){
                //判断是否在游戏中
                PushBusStatusVirtual pushBusStatusVirtual = pushBusStatusVirtualDao.get(reqVO.getBusId(),reqVO.getUid(),customer.getId());
                if (pushBusStatusVirtual != null){
                    if (pushBusStatusVirtualDao.delete(reqVO.getBusId(),pushBusStatusVirtual.getOptId()) > 0){
                        logger.info("处理下机操作...");

                        if(pushCoinVirtualMachineDao.updateState(pushBusStatusVirtual.getOptId()) > 0){
                            logger.info("更改总表状态成功.");
                        }
                        if(pushCoinVirtualOptRouterDao.updateState(customer.getGroupId(),pushBusStatusVirtual.getOptId()) > 0 ){
                            logger.info("更改分表状态成功.");
                        }

                    }
                }
                logger.info("用户=>" + reqVO.getUid() + ",离开房间=>" + reqVO.getBusId());
            }
            return new BaseRespVO(200,true,"离开房间");
        }else{
            return new BaseRespVO(0,false,"当前商户不存在");
        }
    }

    @Override
    public BaseRespVO handleCallback(String p1,String p2,String md5_value,DollBus dollBus,long uid,Customer customer) {
        PushBusStatusVirtual pushBusStatusVirtual = pushBusStatusVirtualDao.get(dollBus.getBusId(),uid,customer.getId());
        if (pushBusStatusVirtual != null){
            MachinePushCoinVirtual machinePushCoinVirtual = pushCoinVirtualMachineDao.getOne(pushBusStatusVirtual.getOptId());
            if (machinePushCoinVirtual != null){
                Map<String,Integer> valueMaps = PushCoinVirtualUtil.verifyOutCoinIsValid(machinePushCoinVirtual.getAuthType(),p1,p2,md5_value);
                if (!StringUtil.isNullOrEmpty(valueMaps)){
                    int T = valueMaps.get("T");
                    int Z = valueMaps.get("Z");
                    int Y = valueMaps.get("Y");
                    int X = machinePushCoinVirtual.getIntoCoin();

                    logger.info("参数验证成功  T=>" + T + ",Z=>" + Z + ",Y=>" + Y + ",X=>" + X);

                    // 结果正确性验证
                    if(PushCoinVirtualUtil.VerifyValidity(machinePushCoinVirtual.getAuthType(),X,Y,Z,T)){
                        logger.info("结果验证真实有效,出币=>" + Y);

                        if(pushCoinVirtualMachineDao.updateCoin(pushBusStatusVirtual.getOptId(),Y,1) > 0){
                            logger.info("全表操作 入币=>" + Y);

                            if (pushCoinVirtualOptRouterDao.updateCoin(customer.getGroupId(),pushBusStatusVirtual.getOptId(),Y,1) > 0){
                                logger.info("分表操作 入币=>" + Y);
                                BaseRespVO vo = new BaseRespVO(200,true,"出奖");
                                vo.setData(Y);
                                return vo;
                            }
                        }
                        return new BaseRespVO(201,true,"本次操作已超時,不计入数据");
                    }else {
                        return new BaseRespVO(1,false,"结果有效性错误");
                    }
                }else {
                    return new BaseRespVO(2,false,"参数验证失败");
                }
            }else {
                return new BaseRespVO(3,false,"找不到当前操作记录");
            }
        }
        return new BaseRespVO(4,false,"机器空闲状态");
    }
}
