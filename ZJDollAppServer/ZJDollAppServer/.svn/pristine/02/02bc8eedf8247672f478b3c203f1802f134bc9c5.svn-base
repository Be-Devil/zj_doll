package com.imlianai.zjdoll.app.modules.core.push.service;

import com.alibaba.fastjson.JSON;
import com.google.common.collect.Maps;
import com.imlianai.dollpub.domain.coinfactory.MachinePushCoin;
import com.imlianai.rpc.support.common.BaseLogger;
import com.imlianai.rpc.support.common.cmd.BaseRespVO;
import com.imlianai.rpc.support.common.exception.TradeOperationException;
import com.imlianai.rpc.support.utils.StringUtil;
import com.imlianai.zjdoll.app.modules.core.doll.bus.DollBusService;
import com.imlianai.zjdoll.app.modules.core.doll.info.DollInfoService;
import com.imlianai.zjdoll.app.modules.core.doll.utils.zengjing.ZengjingUtils;
import com.imlianai.zjdoll.app.modules.core.push.dao.PushCoinOptRouterDao;
import com.imlianai.zjdoll.app.modules.core.push.vo.ApplyRespVO;
import com.imlianai.zjdoll.app.modules.core.push.vo.OperateRespVO;
import com.imlianai.zjdoll.app.modules.core.trade.service.TradeService;
import com.imlianai.zjdoll.app.modules.core.user.service.UserService;
import com.imlianai.zjdoll.app.modules.publics.msg.service.MsgService;
import com.imlianai.zjdoll.domain.doll.DollBus;
import com.imlianai.zjdoll.domain.doll.DollInfo;
import com.imlianai.zjdoll.domain.msg.MsgRoom;
import com.imlianai.zjdoll.domain.msg.MsgRoomType;
import com.imlianai.zjdoll.domain.trade.TradeAccount;
import com.imlianai.zjdoll.domain.trade.TradeCostType;
import com.imlianai.zjdoll.domain.trade.TradeRecord;
import com.imlianai.zjdoll.domain.trade.TradeType;
import com.imlianai.zjdoll.domain.user.UserBase;
import org.springframework.stereotype.Service;

import javax.annotation.Resource;
import java.util.Map;


/**
 * @author wurui
 * @create 2018-05-23 9:45
 **/
@Service
public class PushCoinServiceImpl implements PushCoinService {

    private BaseLogger logger = BaseLogger.getLogger(getClass());

    @Resource
    private PushCoinOptRouterDao pushCoinOptRouterDao;

    @Resource
    private TradeService tradeService;

    @Resource
    private UserService userService;

    @Resource
    private DollBusService dollBusService;

    @Resource
    private DollInfoService dollInfoService;

    @Resource
    private MsgService msgService;

    @Override
    public int CoinToJewel(long uid, int busId, long optId, int outCoin, int isFinal) {

        UserBase userBase = userService.getUserBase(uid);
        if (userBase != null) {

            MachinePushCoin machinePushCoin = pushCoinOptRouterDao.getOne(optId, uid);
            if (machinePushCoin != null) {
                try {

                    DollBus dollBus = dollBusService.getDollBus(machinePushCoin.getBusId());
                    if (dollBus != null && dollBus.getDeviceId().equals(machinePushCoin.getDeviceId())) {

                        DollInfo dollInfo = dollInfoService.getDollInfo(dollBus.getDollId());
                        if (dollInfo != null) {

                            //实时更新
                            if (isFinal == 0) {
                                if (outCoin == 0) return 0;
                                int jewel = dollInfo.getReturnJewel() * outCoin;
                                if (machinePushCoin.getState() != 1 && machinePushCoin.getJewelStatus() != 1) {
                                    if(pushCoinOptRouterDao.updateCoin(optId,outCoin,1) > 0){
                                        logger.info("CoinToJewel 实际出币=>" + machinePushCoin.getOutCoin() + ",兑换成钻石比例 1:" + dollInfo.getReturnJewel() + ",实际兑换钻石数=>" + jewel);
                                        if (pushCoinOptRouterDao.updateJewel(jewel,machinePushCoin.getOptId()) > 0){
                                            if (this.charge(userBase.getUid(), machinePushCoin.getOptId(), dollBus.getBusId(),jewel) == 1) {
                                                sendToMsg(dollBus,jewel);
                                                return 1;
                                            }
                                        }
                                    }
                                }
                            }
                            //最终状态
                            if (isFinal == 1) {
                                //更新状态
                                if (pushCoinOptRouterDao.updateState(optId) > 0 && pushCoinOptRouterDao.updateJewelStatus(optId) > 0) {
                                    logger.info("CoinToJewel 更新操作状态成功");
                                    return 1;
                                }
                            }
                        }
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }
        return 0;
    }

    @Override
    public BaseRespVO apply(long uid, int busId, int customerId) {
        DollBus dollBus = dollBusService.getDollBus(busId);
        if (dollBus != null) {
            if (dollBus.getValid() != 1) {
                return new BaseRespVO(0, false, "当前机器下架");
            }
            if (dollBus.getType() != 1) {
                return new BaseRespVO(0, false, "上机失败:类型错误");
            }
            UserBase userBase = userService.getUserBase(uid);
            if (userBase != null){
                try {
                    TradeAccount tradeAccount = tradeService.getAccount(userBase.getUid());
                    if (tradeAccount != null ){
                        if (tradeAccount.getCoin() >= dollBus.getPrice()){
                            ApplyRespVO vo = ZengjingUtils.apply(uid, Integer.parseInt(dollBus.getDeviceId()), customerId);
                            logger.info(JSON.toJSONString(vo));
                            if (!StringUtil.isNullOrEmpty(vo) && vo.isState() && vo.getOptId() != 0){
                                MachinePushCoin machinePushCoin = new MachinePushCoin();
                                machinePushCoin.setOptId(vo.getOptId());
                                machinePushCoin.setUid(userBase.getUid());
                                machinePushCoin.setBusId(dollBus.getBusId());
                                machinePushCoin.setDeviceId(dollBus.getDeviceId());
                                machinePushCoin.setCustomerId(customerId);
                                if(pushCoinOptRouterDao.insert(machinePushCoin)>0){
                                    logger.info("新增操作流水成功");
                                    return vo;
                                }
                            }
                            return new BaseRespVO(0,false,vo.getMsg());
                        }else {
                            return new BaseRespVO(0, false, "上机失败:余额不足");
                        }
                    }else {
                        tradeService.initAccount(userBase.getUid());
                        return new BaseRespVO(0, false, "上机失败:账户异常");
                    }
                }catch (Exception e){
                    logger.info("apply=>" + e.getMessage());
                    return new BaseRespVO(0, false, "上机失败:异常操作");
                }
            }else {
                return new BaseRespVO(0, false, "上机失败:用户不存在");
            }
        }
        return new BaseRespVO(0, false, "上机失败:机器不存在");
    }

    @Override
    public BaseRespVO push(long uid, int busId, int customerId) {
        DollBus dollBus = dollBusService.getDollBus(busId);
        if (dollBus != null) {
            if (dollBus.getValid() != 1) {
                return new BaseRespVO(0, false, "当前机器下架");
            }
            if (dollBus.getType() != 1) {
                return new BaseRespVO(0, false, "推币失败:类型错误");
            }

            UserBase userBase = userService.getUserBase(uid);
            if (userBase != null){
                try {
                    TradeAccount tradeAccount = tradeService.getAccount(userBase.getUid());
                    if (tradeAccount != null ){
                        if (tradeAccount.getCoin() >= dollBus.getPrice()){
                            //return iAppPushCoinRemoteService.putCoin(vo.getUid(),vo.getBusId(),vo.getCustomerId());
                            //扣费
                            TradeRecord record = new TradeRecord(userBase.getUid(),0, TradeType.PUSH_COIN.type,dollBus.getBusId(),dollBus.getPrice(), TradeCostType.COST_COIN.type,"推币机消费" + dollBus.getPrice()+"游戏币");
                            if (tradeService.consume(record)){
                                OperateRespVO vo = ZengjingUtils.push(uid, Integer.parseInt(dollBus.getDeviceId()), customerId);
                                if (!StringUtil.isNullOrEmpty(vo) && vo.isState()){
                                    if(pushCoinOptRouterDao.updateCoin(vo.getOptId(),1,0) > 0){
                                        return vo;
                                    }
                                }
                                return new BaseRespVO(0,false,vo.getMsg());
                            }
                        }
                        return new BaseRespVO(0, false, "推币失败:余额不足");
                    }else {
                        return new BaseRespVO(0, false, "推币失败:账户异常");
                    }
                }catch (Exception e){
                    logger.info("apply=>" + e.getMessage());
                    return new BaseRespVO(0, false, "推币失败:扣费失败");
                }
            }else {
                return new BaseRespVO(0, false, "推币失败:用户不存在");
            }
        }
        return new BaseRespVO(0, false, "推币失败:机器不存在");
    }

    @Override
    public BaseRespVO operate(long uid, int busId) {
        DollBus dollBus = dollBusService.getDollBus(busId);
        if (dollBus != null) {
            if (dollBus.getValid() != 1) {
                return new BaseRespVO(0, false, "当前机器下架");
            }
            if (dollBus.getType() != 1) {
                return new BaseRespVO(0, false, "摆动失败:类型错误");
            }
            //return iAppPushCoinRemoteService.operate(vo.getUid(),vo.getBusId());
            return ZengjingUtils.operate(uid, Integer.parseInt(dollBus.getDeviceId()));
        }
        return new BaseRespVO(0, false, "摆动失败:机器不存在");
    }

    @Override
    public BaseRespVO query(long optId, int customerId) {
        return ZengjingUtils.query(optId, customerId);
    }

    @Override
    public BaseRespVO finish(long uid, int busId, int customerId) {
        DollBus dollBus = dollBusService.getDollBus(busId);
        if (dollBus != null) {
            if (dollBus.getValid() != 1) {
                return new BaseRespVO(0, false, "当前机器下架");
            }
            if (dollBus.getType() != 1) {
                return new BaseRespVO(0, false, "下机失败:机器类型错误");
            }
            //return iAppPushCoinRemoteService.finish(vo.getUid(),vo.getBusId(),vo.getCustomerId());
            return ZengjingUtils.finish(uid, Integer.parseInt(dollBus.getDeviceId()), customerId);
        }
        return new BaseRespVO(0, false, "下机失败:机器不存在");
    }

    /**
     * 系统充值
     *
     * @param uid
     * @param optId
     * @param jewel
     * @return
     * @throws TradeOperationException
     */
    private int charge(long uid, long optId, int busId,int jewel) {
        logger.info("CoinToJewel 执行系统充值");
        try {
            TradeRecord tradeRecord = new TradeRecord(uid, uid,
                    TradeType.PUSH_PRIZE.type, busId, jewel,
                    TradeCostType.COST_JEWEL.type, "推币得" + jewel + "钻");
            tradeRecord.setOptId(optId);

            if (tradeService.charge(tradeRecord)) {
                logger.info("CoinToJewel 成功充值=>" + 0 + " 个钻石");
                return 1;
            }
        } catch (TradeOperationException e) {
            e.printStackTrace();
        }
        return 0;
    }


    /**
     * 发送房间消息
     * @param dollBus
     */
    private void sendToMsg(DollBus dollBus,int jewel){
        if (dollBus != null){
            MsgRoom msgRoom = new MsgRoom(dollBus, MsgRoomType.PUSH_COIN_JEWEL.type, "获得 " + jewel + " 钻石");
            Map<String,Integer> map = Maps.newHashMap();
            map.put("jewel",jewel);
            msgRoom.setData(JSON.toJSONString(map));
            msgService.sendMsgRoom(msgRoom);
        }
    }

}
