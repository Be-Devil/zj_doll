package com.imlianai.zjdoll.app.modules.core.push.virtual.service;

import com.alibaba.fastjson.JSON;
import com.google.common.collect.Maps;
import com.imlianai.dollpub.domain.coinfactory.MachinePushCoinVirtual;
import com.imlianai.rpc.support.common.BaseLogger;
import com.imlianai.rpc.support.common.cmd.BaseRespVO;
import com.imlianai.rpc.support.common.exception.NotEnoughBeanException;
import com.imlianai.rpc.support.common.exception.TradeOperationException;
import com.imlianai.rpc.support.utils.StringUtil;
import com.imlianai.zjdoll.app.modules.core.doll.bus.DollBusService;
import com.imlianai.zjdoll.app.modules.core.doll.info.DollInfoDao;
import com.imlianai.zjdoll.app.modules.core.doll.service.DollService;
import com.imlianai.zjdoll.app.modules.core.push.virtual.dao.PushCoinOptVirtualDao;
import com.imlianai.zjdoll.app.modules.core.push.virtual.util.ZengjingVirtualUtils;
import com.imlianai.zjdoll.app.modules.core.push.virtual.vo.EntryVirtualRoomReqVO;
import com.imlianai.zjdoll.app.modules.core.push.virtual.vo.OperateVirtualReqVO;
import com.imlianai.zjdoll.app.modules.core.push.vo.ApplyRespVO;
import com.imlianai.zjdoll.app.modules.core.trade.service.TradeService;
import com.imlianai.zjdoll.app.modules.core.user.service.UserService;
import com.imlianai.zjdoll.app.modules.publics.msg.service.MsgService;
import com.imlianai.zjdoll.domain.doll.DollBus;
import com.imlianai.zjdoll.domain.doll.DollInfo;
import com.imlianai.zjdoll.domain.msg.MsgRoom;
import com.imlianai.zjdoll.domain.msg.MsgRoomType;
import com.imlianai.zjdoll.domain.trade.TradeAccount;
import com.imlianai.zjdoll.domain.trade.TradeCostType;
import com.imlianai.zjdoll.domain.trade.TradeRecord;
import com.imlianai.zjdoll.domain.trade.TradeType;
import com.imlianai.zjdoll.domain.user.UserBase;
import com.imlianai.zjdoll.domain.user.UserGeneral;
import org.springframework.stereotype.Service;

import javax.annotation.Resource;
import java.util.Map;

/**
 * @author wurui
 * @create 2018-07-04 11:53
 **/
@Service
public class PushCoinVirtualServiceImpl implements PushCoinVirtualService {

    private BaseLogger logger = BaseLogger.getLogger(getClass());

    @Resource
    private DollBusService dollBusService;

    @Resource
    private UserService userService;

    @Resource
    private DollService dollService;

    @Resource
    private TradeService tradeService;

    @Resource
    private PushCoinOptVirtualDao pushCoinOptVirtualDao;

    @Resource
    private DollInfoDao dollInfoDao;

    @Resource
    private MsgService msgService;

    @Override
    public BaseRespVO entryVirtualCoinPushRoom(EntryVirtualRoomReqVO reqVO) {
        logger.info("entryVirtualCoinPushRoom 进入虚拟推币机=>" + reqVO.getUid());
        DollBus dollBus = dollBusService.getDollBus(reqVO.getBusId());
        if (dollBus != null && dollBus.getVirtual() == 1 && dollBus.getValid() == 1 && dollBus.getType() == 1) {
            UserBase userBase = userService.getUserBase(reqVO.getUid());
            if (userBase != null) {
                BaseRespVO respVO = ZengjingVirtualUtils.entryVirtualCoinPushRoom(userBase.getUid(), Integer.parseInt(dollBus.getDeviceId()));
                logger.info("entryVirtualCoinPushRoom 请求结果=>" + JSON.toJSONString(respVO));
                if (!StringUtil.isNullOrEmpty(respVO)) {
                    if (respVO.isState()) {
                        Map<String, Object> respMap = Maps.newHashMap();
                        respMap.put("type", respVO.getData());
                        respMap.put("price", dollBus.getPrice());
                        dollService.enterBus(userBase.getUid(), dollBus.getBusId());
                        TradeAccount tradeAccount = tradeService.getAccount(reqVO.getUid());
                        if (tradeAccount != null) {
                            respMap.put("coin", tradeAccount.getCoin());
                            respMap.put("jewel", tradeAccount.getJewel());
                        }
                        return new BaseRespVO(respMap);
                    }
                }
            }
        }
        return new BaseRespVO(0, false, "房间类型错误或机器已下架");
    }

    @Override
    public BaseRespVO laveVirtualCoinPushRoom(EntryVirtualRoomReqVO reqVO) {
        logger.info("laveVirtualCoinPushRoom 离开虚拟推币机=>" + reqVO.getUid());
        DollBus dollBus = dollBusService.getDollBus(reqVO.getBusId());
        if (dollBus != null && dollBus.getVirtual() == 1 && dollBus.getValid() == 1 && dollBus.getType() == 1) {
            UserBase userBase = userService.getUserBase(reqVO.getUid());
            if (userBase != null) {
                BaseRespVO respVO = ZengjingVirtualUtils.laveVirtualCoinPushRoom(userBase.getUid(), Integer.parseInt(dollBus.getDeviceId()));
                logger.info("laveVirtualCoinPushRoom 请求结果=>" + JSON.toJSONString(respVO));
                if (!StringUtil.isNullOrEmpty(respVO)) {
                    if (respVO.isState()) {
                        dollService.leaveBus(userBase.getUid(), dollBus.getBusId(), false);
                        logger.info("laveVirtualCoinPushRoom 离开房间成功");
                    }
                    return respVO;
                }
            }
        }
        return new BaseRespVO(0, false, "房间类型错误或机器已下架");
    }

    @Override
    public BaseRespVO apply(OperateVirtualReqVO reqVO) {
        logger.info("virtual apply 用户上机");
        DollBus dollBus = dollBusService.getDollBus(reqVO.getBusId());
        if (dollBus != null) {
            logger.info("virtual apply 机器类型  type=>" + dollBus.getType() + "virtual=>" + dollBus.getVirtual());
            if (dollBus.getVirtual() == 1 && dollBus.getValid() == 1 && dollBus.getType() == 1) {
                UserBase userBase = userService.getUserBase(reqVO.getUid());
                if (userBase != null) {
                    TradeAccount tradeAccount = tradeService.getAccount(reqVO.getUid());
                    if (tradeAccount != null && tradeAccount.getCoin() >= dollBus.getPrice()) {
                        logger.info("virtual apply 余额足够");
                        ApplyRespVO respVO = ZengjingVirtualUtils.apply(userBase.getUid(), Integer.parseInt(dollBus.getDeviceId()));
                        logger.info("virtual apply 请求结果=>" + JSON.toJSONString(respVO));
                        if (!StringUtil.isNullOrEmpty(respVO)) {

                            DollInfo dollInfo = dollInfoDao.getDollInfo(dollBus.getDollId());
                            if (dollInfo != null) {

                                MachinePushCoinVirtual machinePushCoinVirtual = new MachinePushCoinVirtual();
                                machinePushCoinVirtual.setOptId(respVO.getOptId());
                                machinePushCoinVirtual.setUid(userBase.getUid());
                                machinePushCoinVirtual.setBusId(dollBus.getBusId());
                                machinePushCoinVirtual.setDeviceId(dollBus.getDeviceId());
                                machinePushCoinVirtual.setCustomerId(88); //商户ID
                                machinePushCoinVirtual.setPrice(dollBus.getPrice());
                                machinePushCoinVirtual.setRate(dollInfo.getReturnJewel());
                                machinePushCoinVirtual.setTime(30);
                                if (pushCoinOptVirtualDao.insert(machinePushCoinVirtual) > 0) {
                                    logger.info("新增操作流水成功");
//                                    UserGeneral userGeneral = userService.getUserGeneral(reqVO.getUid());
//                                    if (userGeneral != null) {
//                                        Map<String, Object> data = Maps.newHashMap();
//                                        data.put("uid", userGeneral.getUid());
//
//                                    }
                                    return respVO;
                                } else {
                                    return new BaseRespVO(5, false, "娃娃信息不存在");
                                }
                            } else {
                                return new BaseRespVO(4, false, "娃娃信息不存在");
                            }
                        }
                    } else {
                        return new BaseRespVO(2, false, "账户余额不足");
                    }
                } else {
                    return new BaseRespVO(1, false, "用户信息不存在");
                }
            } else {
                return new BaseRespVO(3, false, "房间类型错误或机器已下架");
            }
        }
        return new BaseRespVO(0, false, "机器不存在");
    }

    @Override
    public BaseRespVO push(OperateVirtualReqVO reqVO) {
        logger.info("virtual push 用户投币");
        DollBus dollBus = dollBusService.getDollBus(reqVO.getBusId());
        if (dollBus != null) {
            logger.info("virtual push 机器类型  type=>" + dollBus.getType() + ",virtual=>" + dollBus.getVirtual());
            if (dollBus.getVirtual() == 1 && dollBus.getValid() == 1 && dollBus.getType() == 1) {
                UserBase userBase = userService.getUserBase(reqVO.getUid());
                if (userBase != null) {

                    MachinePushCoinVirtual machinePushCoinVirtual = pushCoinOptVirtualDao.getOne(reqVO.getOptId(), reqVO.getUid());
                    if (machinePushCoinVirtual != null && machinePushCoinVirtual.getState() != 1) {

                        logger.info("virtual push 操作记录  optId=>" + machinePushCoinVirtual.getOptId() + ",状态=>" + machinePushCoinVirtual.getState());

                        TradeAccount tradeAccount = tradeService.getAccount(reqVO.getUid());
                        if (tradeAccount != null && tradeAccount.getCoin() >= dollBus.getPrice()) {
                            try {
                                logger.info("virtual push 余额足够,开始扣费");
                                TradeRecord record = new TradeRecord(userBase.getUid(), 0, TradeType.PUSH_COIN_VIRTUAL.type, dollBus.getBusId(), dollBus.getPrice(), TradeCostType.COST_COIN.type, "虚拟推币机消费" + dollBus.getPrice() + "游戏币");
                                record.setOptId(machinePushCoinVirtual.getOptId());
                                if (tradeService.consume(record)) {
                                    logger.info("virtual push 扣费成功");
                                    BaseRespVO respVO = ZengjingVirtualUtils.push(userBase.getUid(), Integer.parseInt(dollBus.getDeviceId()));
                                    if (!StringUtil.isNullOrEmpty(respVO)) {
                                        logger.info("virtual push 请求结果=>" + JSON.toJSONString(respVO));
                                        if (respVO.isState()) {
                                            try {
                                                if (machinePushCoinVirtual.getOptId() == Long.parseLong(respVO.getData().toString())) {
                                                    //入币
                                                    if (pushCoinOptVirtualDao.updateCoin(machinePushCoinVirtual.getOptId(), 1, dollBus.getPrice(), 0) > 0) {
                                                        logger.info("更新入币成功");
                                                        Map<String, Object> respMap = Maps.newHashMap();
                                                        respMap.put("optId", respVO.getData());
                                                        TradeAccount account = tradeService.getAccount(reqVO.getUid());
                                                        if (account != null) {
                                                            respMap.put("coin", account.getCoin());
                                                            respMap.put("jewel", account.getJewel());
                                                        }
                                                        return new BaseRespVO(respMap);
                                                    }
                                                } else {
                                                    return new BaseRespVO(6, false, "非法的结果~~");
                                                }
                                            } catch (Exception e) {
                                                return new BaseRespVO(5, false, "系统异常~~");
                                            }
                                        } else {
                                            return respVO;
                                        }
                                    } else {
                                        return new BaseRespVO(7, false, "请求失败,请稍后重试~~");
                                    }
                                }
                            } catch (TradeOperationException | NotEnoughBeanException e) {
                                e.printStackTrace();
                            }
                        }
                        return new BaseRespVO(2, false, "账户余额不足");
                    } else {
                        return new BaseRespVO(4, false, "操作记录不存在或已结束,请重新上机~~");
                    }
                } else {
                    return new BaseRespVO(1, false, "用户信息不存在");
                }
            } else {
                return new BaseRespVO(3, false, "房间类型错误或机器已下架");
            }
        }
        return new BaseRespVO(0, false, "机器不存在");
    }

    @Override
    public BaseRespVO operate(OperateVirtualReqVO reqVO) {
        DollBus dollBus = dollBusService.getDollBus(reqVO.getBusId());
        if (dollBus != null) {
            if (dollBus.getVirtual() == 1 && dollBus.getValid() == 1 && dollBus.getType() == 1) {
                UserBase userBase = userService.getUserBase(reqVO.getUid());
                if (userBase != null) {
                    BaseRespVO respVO = ZengjingVirtualUtils.operate(userBase.getUid(), Integer.parseInt(dollBus.getDeviceId()));
                    if (!StringUtil.isNullOrEmpty(respVO)) {
                        return respVO;
                    }
                } else {
                    return new BaseRespVO(1, false, "用户信息不存在");
                }
            } else {
                return new BaseRespVO(3, false, "房间类型错误或机器已下架");
            }
        }
        return new BaseRespVO(0, false, "机器不存在");
    }

    @Override
    public BaseRespVO finish(OperateVirtualReqVO reqVO) {
        DollBus dollBus = dollBusService.getDollBus(reqVO.getBusId());
        if (dollBus != null) {
            if (dollBus.getVirtual() == 1 && dollBus.getValid() == 1 && dollBus.getType() == 1) {
                UserBase userBase = userService.getUserBase(reqVO.getUid());
                if (userBase != null) {
                    MachinePushCoinVirtual machinePushCoinVirtual = pushCoinOptVirtualDao.getOne(reqVO.getOptId(), reqVO.getUid());
                    if (machinePushCoinVirtual != null && machinePushCoinVirtual.getState() != 1) {
                        BaseRespVO respVO = ZengjingVirtualUtils.finish(userBase.getUid(), Integer.parseInt(dollBus.getDeviceId()));
                        if (!StringUtil.isNullOrEmpty(respVO)) {
                            if (respVO.isState()) {
                                try {
                                    long optId = Long.parseLong(respVO.getData().toString());
                                    if (optId > 0 && optId == reqVO.getOptId()) {
                                        logger.info("请求成功,执行主动下机");
                                        if (pushCoinOptVirtualDao.updateState(machinePushCoinVirtual.getOptId()) > 0) {
                                            logger.info("状态更新成功");
                                            Map<String, Object> respMap = Maps.newHashMap();
                                            TradeAccount account = tradeService.getAccount(reqVO.getUid());
                                            if (account != null) {
                                                respMap.put("coin", account.getCoin());
                                                respMap.put("jewel", account.getJewel());
                                            }
                                            return new BaseRespVO(respMap);
                                        } else {
                                            return new BaseRespVO(4, false, "主动下机失败");
                                        }
                                    } else {
                                        return new BaseRespVO(6, false, "服务器操作ID异常");
                                    }
                                }catch (Exception e){
                                    return new BaseRespVO(8, false, "服务器操作ID异常");
                                }
                            } else {
                                return new BaseRespVO(7, false, respVO.getMsg());
                            }
                        }
                    } else {
                        return new BaseRespVO(5, false, "当前状态已下机");
                    }
                } else {
                    return new BaseRespVO(1, false, "用户信息不存在");
                }
            } else {
                return new BaseRespVO(3, false, "房间类型错误或机器已下架");
            }
        }
        return new BaseRespVO(0, false, "机器不存在");
    }

    @Override
    public int CoinToJewel(long uid, int busId, long optId, int outCoin, int win, int isFinal) {
        logger.info("virtual CoinToJewel 虚拟推币机入币回调=>" + outCoin + "中奖得币=>" + win + ",是否最终结果=>" + isFinal);

        MachinePushCoinVirtual machinePushCoinVirtual = pushCoinOptVirtualDao.getOne(optId, uid);

        logger.info("virtual CoinToJewel record=>" + JSON.toJSONString(machinePushCoinVirtual));

        if (machinePushCoinVirtual != null) {

            logger.info("virtual CoinToJewel 回调的busId=>" + busId + ",真实的busId=>" + machinePushCoinVirtual.getBusId());

            DollBus dollBus = dollBusService.getDollBus(machinePushCoinVirtual.getBusId());
            if (dollBus.getVirtual() == 1 && dollBus.getValid() == 1 && dollBus.getType() == 1) {

                logger.info("virtual CoinToJewel 机器认证通过");

                UserBase userBase = userService.getUserBase(uid);
                if (userBase != null) {

                    logger.info("virtual CoinToJewel 用户真实存在=>" + userBase.getUid());

                    try {
                        if (machinePushCoinVirtual.getState() != 1) {

                            logger.info("virtual CoinToJewel 正在游戏中...");


                            //消息体
                            Map<String, Object> map = Maps.newHashMap();
                            //Map<String, Object> allMsgMap = Maps.newHashMap();
                            map.put("isFinal", isFinal);
                            map.put("uid", uid);

                            //allMsgMap.put("uid", uid);


                            UserGeneral userGeneral = userService.getUserGeneral(uid);
                            if (userGeneral != null) {
                                map.put("name", userGeneral.getName());
                                map.put("head", userGeneral.getHead());

                                //allMsgMap.put("name", userGeneral.getName());
                                //allMsgMap.put("head", userGeneral.getHead());


                                if (isFinal == 0) {

                                    logger.info("virtual CoinToJewel 正常得币状态,outCoin=>" + outCoin);

                                    if (outCoin > 0){

                                        DollInfo dollInfo = dollInfoDao.getDollInfo(dollBus.getDollId());
                                        if (dollInfo != null) {

                                            logger.info("virtual CoinToJewel 娃娃可兑换钻石=>" + dollInfo.getReturnJewel());

                                            if (pushCoinOptVirtualDao.updateCoin(machinePushCoinVirtual.getOptId(), outCoin, outCoin * dollBus.getPrice(), 1) > 0) {

                                                logger.info("virtual CoinToJewel 更新出币成功=>" + outCoin + ",uid=>" + uid);

                                                int jewel = outCoin * dollInfo.getReturnJewel();
                                                if (jewel != 0) {

                                                    if (pushCoinOptVirtualDao.updateJewel(jewel, optId) > 0) {

                                                        if (charge(userBase.getUid(), machinePushCoinVirtual.getOptId(), dollBus.getBusId(), jewel, "虚拟推币机出奖得" + jewel + "钻") > 0) {

                                                            // todo 发消息
                                                            logger.info("virtual CoinToJewel 充值钻石成功,开始发送获奖消息");

                                                            map.put("jewel", jewel);
                                                            map.put("time", 30);
                                                            TradeAccount tradeAccount = tradeService.getAccount(userBase.getUid());
                                                            if (tradeAccount != null) {
                                                                map.put("u_coin", tradeAccount.getCoin());
                                                                map.put("u_jewel", tradeAccount.getJewel());
                                                            }
                                                            sendRoomMsg(dollBus, MsgRoomType.PUSH_COIN_JEWEL.type, map, "恭喜玩家 <span style='color: #eaec04'>" + userGeneral.getName() + " </span>获得 <span style='color: #4d16ec'>" + jewel + " </span>钻石");

                                                            //allMsgMap.put("jewel", jewel);

                                                            //发送

                                                        }else {
                                                            logger.info("virtual CoinToJewel 系统充值失败");
                                                        }
                                                    }else {
                                                        logger.info("virtual CoinToJewel 更新钻石失败");
                                                    }
                                                }
                                            }else {

                                                logger.info("virtual CoinToJewel 更新出币失败");
                                            }
                                        }
                                    }else {

                                        logger.info("virtual CoinToJewel 出币为0不处理");
                                    }

                                } else {

                                    if (isFinal == 1) {

                                        logger.info("virtual CoinToJewel 最终结果状态");

                                        if (pushCoinOptVirtualDao.updateState(optId) > 0 && pushCoinOptVirtualDao.updateJewelStatus(optId) > 0) {
                                            logger.info("virtual CoinToJewel 更新操作状态成功");
                                            map.put("jewel", 0);
                                            map.put("time", 0);
                                            TradeAccount tradeAccount = tradeService.getAccount(userBase.getUid());
                                            if (tradeAccount != null) {
                                                map.put("u_coin", tradeAccount.getCoin());
                                                map.put("u_jewel", tradeAccount.getJewel());
                                            }
                                            sendRoomMsg(dollBus, MsgRoomType.PUSH_COIN_RELEASE.type, map, "操作到期，可以重新上机");
                                            return 1;
                                        }

                                    }
                                }
                            } else {
                                logger.info("virtual CoinToJewel 已被锁定不可操作 optId=>" + machinePushCoinVirtual.getOptId());
                            }
                        }else {
                            logger.info("virtual CoinToJewel 已结束上机,不处理结果...");
                        }
                    } catch (Exception e) {
                        logger.info("virtual CoinToJewel err=>" + e.getMessage());
                    }
                }

            }
        }

        return 0;
    }


    /**
     * 系统充值
     *
     * @param uid
     * @param optId
     * @param jewel
     * @return
     * @throws TradeOperationException
     */
    private int charge(long uid, long optId, int busId, int jewel, String remark) {
        logger.info("virtual charge 执行系统充值");
        try {
            TradeRecord tradeRecord = new TradeRecord(uid, uid,
                    TradeType.PUSH_PRIZE_VIRTUAL.type, busId, jewel,
                    TradeCostType.COST_JEWEL.type, remark);
            tradeRecord.setOptId(optId);

            if (tradeService.charge(tradeRecord)) {
                logger.info("virtual charge 成功充值=>" + jewel + " 个钻石");
                return 1;
            }
        } catch (TradeOperationException e) {
            e.printStackTrace();
        }
        return 0;
    }


    /**
     * 发送房间消息
     *
     * @param dollBus
     * @param msgRoomType
     * @param data
     * @param body
     */
    private void sendRoomMsg(DollBus dollBus, int msgRoomType, Map<String, Object> data, String body) {
        MsgRoom msgRoom = new MsgRoom(dollBus, msgRoomType, body);
        if (!StringUtil.isNullOrEmpty(data)) {
            msgRoom.setData(JSON.toJSONString(data));
        }
        msgService.sendMsgRoom(msgRoom);
    }


}
