package com.imlianai.zjdoll.app.modules.core.push.virtual.service;

import com.alibaba.fastjson.JSON;
import com.google.common.collect.Maps;
import com.imlianai.rpc.support.common.BaseLogger;
import com.imlianai.rpc.support.common.cmd.BaseRespVO;
import com.imlianai.rpc.support.common.exception.NotEnoughBeanException;
import com.imlianai.rpc.support.common.exception.TradeOperationException;
import com.imlianai.rpc.support.utils.StringUtil;
import com.imlianai.zjdoll.app.modules.core.doll.bus.DollBusService;
import com.imlianai.zjdoll.app.modules.core.doll.service.DollService;
import com.imlianai.zjdoll.app.modules.core.push.virtual.util.ZengjingVirtualUtils;
import com.imlianai.zjdoll.app.modules.core.push.virtual.vo.EntryVirtualRoomReqVO;
import com.imlianai.zjdoll.app.modules.core.push.virtual.vo.OperateVirtualReqVO;
import com.imlianai.zjdoll.app.modules.core.push.vo.ApplyRespVO;
import com.imlianai.zjdoll.app.modules.core.trade.service.TradeService;
import com.imlianai.zjdoll.app.modules.core.user.service.UserService;
import com.imlianai.zjdoll.domain.doll.DollBus;
import com.imlianai.zjdoll.domain.trade.TradeAccount;
import com.imlianai.zjdoll.domain.trade.TradeCostType;
import com.imlianai.zjdoll.domain.trade.TradeRecord;
import com.imlianai.zjdoll.domain.trade.TradeType;
import com.imlianai.zjdoll.domain.user.UserBase;
import org.springframework.stereotype.Service;

import javax.annotation.Resource;
import java.util.Map;

/**
 * @author wurui
 * @create 2018-07-04 11:53
 **/
@Service
public class PushCoinVirtualServiceImpl implements PushCoinVirtualService {

    private BaseLogger logger = BaseLogger.getLogger(getClass());

    @Resource
    private DollBusService dollBusService;

    @Resource
    private UserService userService;

    @Resource
    private DollService dollService;

    @Resource
    private TradeService tradeService;

    @Override
    public BaseRespVO entryVirtualCoinPushRoom(EntryVirtualRoomReqVO reqVO) {
        logger.info("entryVirtualCoinPushRoom 进入虚拟推币机=>" + reqVO.getUid());
        DollBus dollBus = dollBusService.getDollBus(reqVO.getBusId());
        if (dollBus != null && dollBus.getVirtual() == 1 && dollBus.getValid() == 1 && dollBus.getType() == 1){
            UserBase userBase = userService.getUserBase(reqVO.getUid());
            if (userBase != null){
                BaseRespVO respVO = ZengjingVirtualUtils.entryVirtualCoinPushRoom(userBase.getUid(),Integer.parseInt(dollBus.getDeviceId()));
                logger.info("entryVirtualCoinPushRoom 请求结果=>" + JSON.toJSONString(respVO));
                if (!StringUtil.isNullOrEmpty(respVO)){
                    if (respVO.isState()){
                        Map<String,Object> respMap = Maps.newHashMap();
                        respMap.put("type",respVO.getData());
                        dollService.enterBus(userBase.getUid(),dollBus.getBusId());
                        TradeAccount tradeAccount = tradeService.getAccount(reqVO.getUid());
                        if (tradeAccount != null) {
                            respMap.put("coin",tradeAccount.getCoin());
                            respMap.put("jewel",tradeAccount.getJewel());
                        }
                        return new BaseRespVO(respMap);
                    }
                }
            }
        }
        return new BaseRespVO(0,false,"房间类型错误或机器已下架");
    }

    @Override
    public BaseRespVO laveVirtualCoinPushRoom(EntryVirtualRoomReqVO reqVO) {
        logger.info("laveVirtualCoinPushRoom 离开虚拟推币机=>" + reqVO.getUid());
        DollBus dollBus = dollBusService.getDollBus(reqVO.getBusId());
        if (dollBus != null && dollBus.getVirtual() == 1 && dollBus.getValid() == 1 && dollBus.getType() == 1){
            UserBase userBase = userService.getUserBase(reqVO.getUid());
            if (userBase != null){
                BaseRespVO respVO = ZengjingVirtualUtils.laveVirtualCoinPushRoom(userBase.getUid(),Integer.parseInt(dollBus.getDeviceId()));
                logger.info("laveVirtualCoinPushRoom 请求结果=>" + JSON.toJSONString(respVO));
                if (!StringUtil.isNullOrEmpty(respVO)){
                    if (respVO.isState()){
                        dollService.leaveBus(userBase.getUid(),dollBus.getBusId(),false);
                        logger.info("laveVirtualCoinPushRoom 离开房间成功");
                    }
                    return respVO;
                }
            }
        }
        return new BaseRespVO(0,false,"房间类型错误或机器已下架");
    }

    @Override
    public BaseRespVO apply(OperateVirtualReqVO reqVO) {
        logger.info("virtual apply 用户上机");
        DollBus dollBus = dollBusService.getDollBus(reqVO.getBusId());
        if (dollBus != null ){
            logger.info("virtual apply 机器类型  type=>" + dollBus.getType() + "virtual=>" + dollBus.getVirtual());
            if (dollBus.getVirtual() == 1 && dollBus.getValid() == 1 && dollBus.getType() == 1){
                UserBase userBase = userService.getUserBase(reqVO.getUid());
                if (userBase != null){
                    TradeAccount tradeAccount = tradeService.getAccount(reqVO.getUid());
                    if (tradeAccount != null && tradeAccount.getCoin() >= dollBus.getPrice()) {
                        logger.info("virtual apply 余额足够");
                        ApplyRespVO respVO = ZengjingVirtualUtils.apply(userBase.getUid(),Integer.parseInt(dollBus.getDeviceId()));
                        logger.info("virtual apply 请求结果=>" + JSON.toJSONString(respVO));
                        if (!StringUtil.isNullOrEmpty(respVO)){

                            //todo 记录

                            return respVO;
                        }
                    }else {
                        return new BaseRespVO(2,false,"账户余额不足");
                    }
                }else {
                    return new BaseRespVO(1,false,"用户信息不存在");
                }
            }else {
                return new BaseRespVO(3,false,"房间类型错误或机器已下架");
            }
        }
        return new BaseRespVO(0,false,"机器不存在");
    }

    @Override
    public BaseRespVO push(OperateVirtualReqVO reqVO) {
        logger.info("virtual push 用户投币");
        DollBus dollBus = dollBusService.getDollBus(reqVO.getBusId());
        if (dollBus != null ){
            logger.info("virtual push 机器类型  type=>" + dollBus.getType() + "virtual=>" + dollBus.getVirtual());
            if (dollBus.getVirtual() == 1 && dollBus.getValid() == 1 && dollBus.getType() == 1){
                UserBase userBase = userService.getUserBase(reqVO.getUid());
                if (userBase != null){
                    TradeAccount tradeAccount = tradeService.getAccount(reqVO.getUid());
                    if (tradeAccount != null && tradeAccount.getCoin() >= dollBus.getPrice()) {
                        try {
                            logger.info("virtual push 余额足够,开始扣费");
                            TradeRecord record = new TradeRecord(userBase.getUid(), 0, TradeType.PUSH_COIN_VIRTUAL.type, dollBus.getBusId(), dollBus.getPrice(), TradeCostType.COST_COIN.type, "推币机消费" + dollBus.getPrice() + "游戏币");
                            record.setOptId(0);
                            if(tradeService.consume(record)){
                                logger.info("virtual push 扣费成功");
                                BaseRespVO respVO = ZengjingVirtualUtils.push(userBase.getUid(),Integer.parseInt(dollBus.getDeviceId()));
                                if (!StringUtil.isNullOrEmpty(respVO)){
                                    logger.info("virtual push 请求结果=>" + JSON.toJSONString(respVO));
                                    //todo 记录

                                    return respVO;
                                }
                            }
                        } catch (TradeOperationException | NotEnoughBeanException e) {
                            e.printStackTrace();
                        }
                    }
                    return new BaseRespVO(2,false,"账户余额不足");
                }else {
                    return new BaseRespVO(1,false,"用户信息不存在");
                }
            }else {
                return new BaseRespVO(3,false,"房间类型错误或机器已下架");
            }
        }
        return new BaseRespVO(0,false,"机器不存在");
    }

    @Override
    public BaseRespVO operate(OperateVirtualReqVO reqVO) {
        DollBus dollBus = dollBusService.getDollBus(reqVO.getBusId());
        if (dollBus != null ){
            if (dollBus.getVirtual() == 1 && dollBus.getValid() == 1 && dollBus.getType() == 1){
                UserBase userBase = userService.getUserBase(reqVO.getUid());
                if (userBase != null){
                    BaseRespVO respVO = ZengjingVirtualUtils.operate(userBase.getUid(),Integer.parseInt(dollBus.getDeviceId()));
                    if (!StringUtil.isNullOrEmpty(respVO)){
                        return respVO;
                    }
                }else {
                    return new BaseRespVO(1,false,"用户信息不存在");
                }
            }else {
                return new BaseRespVO(3,false,"房间类型错误或机器已下架");
            }
        }
        return new BaseRespVO(0,false,"机器不存在");
    }

    @Override
    public BaseRespVO finish(OperateVirtualReqVO reqVO) {
        DollBus dollBus = dollBusService.getDollBus(reqVO.getBusId());
        if (dollBus != null ){
            if (dollBus.getVirtual() == 1 && dollBus.getValid() == 1 && dollBus.getType() == 1){
                UserBase userBase = userService.getUserBase(reqVO.getUid());
                if (userBase != null){
                    BaseRespVO respVO = ZengjingVirtualUtils.finish(userBase.getUid(),Integer.parseInt(dollBus.getDeviceId()));
                    if (!StringUtil.isNullOrEmpty(respVO)){
                        return respVO;
                    }
                }else {
                    return new BaseRespVO(1,false,"用户信息不存在");
                }
            }else {
                return new BaseRespVO(3,false,"房间类型错误或机器已下架");
            }
        }
        return new BaseRespVO(0,false,"机器不存在");
    }

    @Override
    public int CoinToJewel(long uid, int busId, long optId, int outCoin, int isFinal) {
        logger.info("virtual CoinToJewel 虚拟推币机入币回调=>" + outCoin  + ",是否最终结果=>" + isFinal);

        if (isFinal == 0){



        }else {


            if (isFinal == 1){


            }

        }
        return 0;
    }


}
